
H523RC_3Pahse_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003d80  08003d80  00004d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003da4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003da4  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2d6  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164a  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00012968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000910  00000000  00000000  00013528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291fa  00000000  00000000  00013e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc3b  00000000  00000000  0003d032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d9bb  00000000  00000000  00049c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  0015766c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0015a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08003d68 	.word	0x08003d68

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08003d68 	.word	0x08003d68

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fce0 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f830 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 fac6 	bl	8000830 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002a4:	f000 f89e 	bl	80003e4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80002a8:	f000 f94c 	bl	8000544 <MX_TIM8_Init>
  MX_TIM15_Init();
 80002ac:	f000 fa16 	bl	80006dc <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002b0:	2100      	movs	r1, #0
 80002b2:	4810      	ldr	r0, [pc, #64]	@ (80002f4 <main+0x60>)
 80002b4:	f002 f9d2 	bl	800265c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start (&htim1, TIM_CHANNEL_1);
 80002b8:	2100      	movs	r1, #0
 80002ba:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <main+0x60>)
 80002bc:	f003 fa8e 	bl	80037dc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 80002c0:	2104      	movs	r1, #4
 80002c2:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <main+0x60>)
 80002c4:	f002 f82e 	bl	8002324 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <main+0x64>)
 80002cc:	f002 f9c6 	bl	800265c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start (&htim8, TIM_CHANNEL_1);
 80002d0:	2100      	movs	r1, #0
 80002d2:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <main+0x64>)
 80002d4:	f003 fa82 	bl	80037dc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_2);
 80002d8:	2104      	movs	r1, #4
 80002da:	4807      	ldr	r0, [pc, #28]	@ (80002f8 <main+0x64>)
 80002dc:	f002 f822 	bl	8002324 <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80002e0:	2100      	movs	r1, #0
 80002e2:	4806      	ldr	r0, [pc, #24]	@ (80002fc <main+0x68>)
 80002e4:	f002 f9ba 	bl	800265c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start (&htim15, TIM_CHANNEL_1);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4804      	ldr	r0, [pc, #16]	@ (80002fc <main+0x68>)
 80002ec:	f003 fa76 	bl	80037dc <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x5c>
 80002f4:	20000028 	.word	0x20000028
 80002f8:	20000074 	.word	0x20000074
 80002fc:	200000c0 	.word	0x200000c0

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b09c      	sub	sp, #112	@ 0x70
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0320 	add.w	r3, r7, #32
 800030a:	2250      	movs	r2, #80	@ 0x50
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fcfe 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
 8000324:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemClock_Config+0xdc>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	4a2c      	ldr	r2, [pc, #176]	@ (80003dc <SystemClock_Config+0xdc>)
 800032c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000330:	6113      	str	r3, [r2, #16]
 8000332:	4b2a      	ldr	r3, [pc, #168]	@ (80003dc <SystemClock_Config+0xdc>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800033e:	bf00      	nop
 8000340:	4b26      	ldr	r3, [pc, #152]	@ (80003dc <SystemClock_Config+0xdc>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	2b08      	cmp	r3, #8
 800034a:	d1f9      	bne.n	8000340 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800034c:	2310      	movs	r3, #16
 800034e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000356:	2320      	movs	r3, #32
 8000358:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800035e:	2302      	movs	r3, #2
 8000360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000366:	237d      	movs	r3, #125	@ 0x7d
 8000368:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800036a:	2302      	movs	r3, #2
 800036c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800036e:	2302      	movs	r3, #2
 8000370:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000372:	2302      	movs	r3, #2
 8000374:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000376:	2308      	movs	r3, #8
 8000378:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800037a:	2300      	movs	r3, #0
 800037c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0320 	add.w	r3, r7, #32
 8000386:	4618      	mov	r0, r3
 8000388:	f000 ffdc 	bl	8001344 <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000392:	f000 fa77 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	231f      	movs	r3, #31
 8000398:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2303      	movs	r3, #3
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2105      	movs	r1, #5
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fbfd 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003c0:	f000 fa60 	bl	8000884 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <SystemClock_Config+0xe0>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <SystemClock_Config+0xe0>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	3770      	adds	r7, #112	@ 0x70
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	44020800 	.word	0x44020800
 80003e0:	40022000 	.word	0x40022000

080003e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b098      	sub	sp, #96	@ 0x60
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2234      	movs	r2, #52	@ 0x34
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f003 fc7d 	bl	8003d10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000416:	4b49      	ldr	r3, [pc, #292]	@ (800053c <MX_TIM1_Init+0x158>)
 8000418:	4a49      	ldr	r2, [pc, #292]	@ (8000540 <MX_TIM1_Init+0x15c>)
 800041a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 250-1;
 800041c:	4b47      	ldr	r3, [pc, #284]	@ (800053c <MX_TIM1_Init+0x158>)
 800041e:	22f9      	movs	r2, #249	@ 0xf9
 8000420:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000422:	4b46      	ldr	r3, [pc, #280]	@ (800053c <MX_TIM1_Init+0x158>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000428:	4b44      	ldr	r3, [pc, #272]	@ (800053c <MX_TIM1_Init+0x158>)
 800042a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800042e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	4b42      	ldr	r3, [pc, #264]	@ (800053c <MX_TIM1_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000436:	4b41      	ldr	r3, [pc, #260]	@ (800053c <MX_TIM1_Init+0x158>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043c:	4b3f      	ldr	r3, [pc, #252]	@ (800053c <MX_TIM1_Init+0x158>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000442:	483e      	ldr	r0, [pc, #248]	@ (800053c <MX_TIM1_Init+0x158>)
 8000444:	f002 f8b2 	bl	80025ac <HAL_TIM_PWM_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800044e:	f000 fa19 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000452:	483a      	ldr	r0, [pc, #232]	@ (800053c <MX_TIM1_Init+0x158>)
 8000454:	f001 ff05 	bl	8002262 <HAL_TIM_OC_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800045e:	f000 fa11 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000462:	2350      	movs	r3, #80	@ 0x50
 8000464:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000466:	2300      	movs	r3, #0
 8000468:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800046e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000472:	4619      	mov	r1, r3
 8000474:	4831      	ldr	r0, [pc, #196]	@ (800053c <MX_TIM1_Init+0x158>)
 8000476:	f003 faa9 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000480:	f000 fa00 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000484:	2360      	movs	r3, #96	@ 0x60
 8000486:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000488:	f241 3388 	movw	r3, #5000	@ 0x1388
 800048c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048e:	2300      	movs	r3, #0
 8000490:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000492:	2300      	movs	r3, #0
 8000494:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4824      	ldr	r0, [pc, #144]	@ (800053c <MX_TIM1_Init+0x158>)
 80004ac:	f002 fa94 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80004b6:	f000 f9e5 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80004ba:	2310      	movs	r3, #16
 80004bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3333;
 80004be:	f640 5305 	movw	r3, #3333	@ 0xd05
 80004c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004c8:	2204      	movs	r2, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	481b      	ldr	r0, [pc, #108]	@ (800053c <MX_TIM1_Init+0x158>)
 80004ce:	f002 fa09 	bl	80028e4 <HAL_TIM_OC_ConfigChannel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004d8:	f000 f9d4 	bl	8000884 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80004dc:	4817      	ldr	r0, [pc, #92]	@ (800053c <MX_TIM1_Init+0x158>)
 80004de:	f003 fbdf 	bl	8003ca0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 80004ee:	23c8      	movs	r3, #200	@ 0xc8
 80004f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000508:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800050c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000512:	2300      	movs	r3, #0
 8000514:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4807      	ldr	r0, [pc, #28]	@ (800053c <MX_TIM1_Init+0x158>)
 8000520:	f003 fb24 	bl	8003b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800052a:	f000 f9ab 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800052e:	4803      	ldr	r0, [pc, #12]	@ (800053c <MX_TIM1_Init+0x158>)
 8000530:	f000 fa12 	bl	8000958 <HAL_TIM_MspPostInit>

}
 8000534:	bf00      	nop
 8000536:	3760      	adds	r7, #96	@ 0x60
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000028 	.word	0x20000028
 8000540:	40012c00 	.word	0x40012c00

08000544 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09c      	sub	sp, #112	@ 0x70
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800054a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000566:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2234      	movs	r2, #52	@ 0x34
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fbc5 	bl	8003d10 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000586:	4b53      	ldr	r3, [pc, #332]	@ (80006d4 <MX_TIM8_Init+0x190>)
 8000588:	4a53      	ldr	r2, [pc, #332]	@ (80006d8 <MX_TIM8_Init+0x194>)
 800058a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 250-1;
 800058c:	4b51      	ldr	r3, [pc, #324]	@ (80006d4 <MX_TIM8_Init+0x190>)
 800058e:	22f9      	movs	r2, #249	@ 0xf9
 8000590:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000592:	4b50      	ldr	r3, [pc, #320]	@ (80006d4 <MX_TIM8_Init+0x190>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8000598:	4b4e      	ldr	r3, [pc, #312]	@ (80006d4 <MX_TIM8_Init+0x190>)
 800059a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800059e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a0:	4b4c      	ldr	r3, [pc, #304]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80005a6:	4b4b      	ldr	r3, [pc, #300]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b49      	ldr	r3, [pc, #292]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80005b2:	4848      	ldr	r0, [pc, #288]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005b4:	f001 fdfe 	bl	80021b4 <HAL_TIM_Base_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80005be:	f000 f961 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80005c2:	4844      	ldr	r0, [pc, #272]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005c4:	f001 fff2 	bl	80025ac <HAL_TIM_PWM_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80005ce:	f000 f959 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80005d2:	4840      	ldr	r0, [pc, #256]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005d4:	f001 fe45 	bl	8002262 <HAL_TIM_OC_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80005de:	f000 f951 	bl	8000884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005e2:	2306      	movs	r3, #6
 80005e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80005ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005ee:	4619      	mov	r1, r3
 80005f0:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80005f2:	f002 fb05 	bl	8002c00 <HAL_TIM_SlaveConfigSynchro>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80005fc:	f000 f942 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000600:	2350      	movs	r3, #80	@ 0x50
 8000602:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800060c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000610:	4619      	mov	r1, r3
 8000612:	4830      	ldr	r0, [pc, #192]	@ (80006d4 <MX_TIM8_Init+0x190>)
 8000614:	f003 f9da 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800061e:	f000 f931 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000622:	2360      	movs	r3, #96	@ 0x60
 8000624:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 5000;
 8000626:	f241 3388 	movw	r3, #5000	@ 0x1388
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000630:	2300      	movs	r3, #0
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800063c:	2300      	movs	r3, #0
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000640:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	4822      	ldr	r0, [pc, #136]	@ (80006d4 <MX_TIM8_Init+0x190>)
 800064a:	f002 f9c5 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8000654:	f000 f916 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000658:	2310      	movs	r3, #16
 800065a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3333;
 800065c:	f640 5305 	movw	r3, #3333	@ 0xd05
 8000660:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000662:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000666:	2204      	movs	r2, #4
 8000668:	4619      	mov	r1, r3
 800066a:	481a      	ldr	r0, [pc, #104]	@ (80006d4 <MX_TIM8_Init+0x190>)
 800066c:	f002 f93a 	bl	80028e4 <HAL_TIM_OC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 8000676:	f000 f905 	bl	8000884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000686:	23c8      	movs	r3, #200	@ 0xc8
 8000688:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80006b8:	f003 fa58 	bl	8003b6c <HAL_TIMEx_ConfigBreakDeadTime>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM8_Init+0x182>
  {
    Error_Handler();
 80006c2:	f000 f8df 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80006c6:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <MX_TIM8_Init+0x190>)
 80006c8:	f000 f946 	bl	8000958 <HAL_TIM_MspPostInit>

}
 80006cc:	bf00      	nop
 80006ce:	3770      	adds	r7, #112	@ 0x70
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000074 	.word	0x20000074
 80006d8:	40013400 	.word	0x40013400

080006dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	@ 0x70
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2234      	movs	r2, #52	@ 0x34
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 faf9 	bl	8003d10 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800071e:	4b42      	ldr	r3, [pc, #264]	@ (8000828 <MX_TIM15_Init+0x14c>)
 8000720:	4a42      	ldr	r2, [pc, #264]	@ (800082c <MX_TIM15_Init+0x150>)
 8000722:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 250-1;
 8000724:	4b40      	ldr	r3, [pc, #256]	@ (8000828 <MX_TIM15_Init+0x14c>)
 8000726:	22f9      	movs	r2, #249	@ 0xf9
 8000728:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b3f      	ldr	r3, [pc, #252]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8000730:	4b3d      	ldr	r3, [pc, #244]	@ (8000828 <MX_TIM15_Init+0x14c>)
 8000732:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000736:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800073e:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <MX_TIM15_Init+0x14c>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b38      	ldr	r3, [pc, #224]	@ (8000828 <MX_TIM15_Init+0x14c>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800074a:	4837      	ldr	r0, [pc, #220]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800074c:	f001 fd32 	bl	80021b4 <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000756:	f000 f895 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800075a:	4833      	ldr	r0, [pc, #204]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800075c:	f001 ff26 	bl	80025ac <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000766:	f000 f88d 	bl	8000884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800076a:	2306      	movs	r3, #6
 800076c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 800076e:	f04f 1310 	mov.w	r3, #1048592	@ 0x100010
 8000772:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000774:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000778:	4619      	mov	r1, r3
 800077a:	482b      	ldr	r0, [pc, #172]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800077c:	f002 fa40 	bl	8002c00 <HAL_TIM_SlaveConfigSynchro>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM15_Init+0xae>
  {
    Error_Handler();
 8000786:	f000 f87d 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000792:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000796:	4619      	mov	r1, r3
 8000798:	4823      	ldr	r0, [pc, #140]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800079a:	f003 f917 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM15_Init+0xcc>
  {
    Error_Handler();
 80007a4:	f000 f86e 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	@ 0x60
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 5000;
 80007ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4816      	ldr	r0, [pc, #88]	@ (8000828 <MX_TIM15_Init+0x14c>)
 80007d0:	f002 f902 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM15_Init+0x102>
  {
    Error_Handler();
 80007da:	f000 f853 	bl	8000884 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim15);
 80007de:	4812      	ldr	r0, [pc, #72]	@ (8000828 <MX_TIM15_Init+0x14c>)
 80007e0:	f003 fa5e 	bl	8003ca0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4807      	ldr	r0, [pc, #28]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800080c:	f003 f9ae 	bl	8003b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM15_Init+0x13e>
  {
    Error_Handler();
 8000816:	f000 f835 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <MX_TIM15_Init+0x14c>)
 800081c:	f000 f89c 	bl	8000958 <HAL_TIM_MspPostInit>

}
 8000820:	bf00      	nop
 8000822:	3770      	adds	r7, #112	@ 0x70
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000c0 	.word	0x200000c0
 800082c:	40014000 	.word	0x40014000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_GPIO_Init+0x50>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	4a10      	ldr	r2, [pc, #64]	@ (8000880 <MX_GPIO_Init+0x50>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_GPIO_Init+0x50>)
 8000848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_GPIO_Init+0x50>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085a:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <MX_GPIO_Init+0x50>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_GPIO_Init+0x50>)
 8000866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	44020c00 	.word	0x44020c00

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0b      	ldr	r2, [pc, #44]	@ (80008dc <HAL_TIM_PWM_MspInit+0x3c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d10e      	bne.n	80008d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <HAL_TIM_PWM_MspInit+0x40>)
 80008b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008b8:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <HAL_TIM_PWM_MspInit+0x40>)
 80008ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008be:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <HAL_TIM_PWM_MspInit+0x40>)
 80008c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40012c00 	.word	0x40012c00
 80008e0:	44020c00 	.word	0x44020c00

080008e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a16      	ldr	r2, [pc, #88]	@ (800094c <HAL_TIM_Base_MspInit+0x68>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10f      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <HAL_TIM_Base_MspInit+0x6c>)
 80008f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008fc:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <HAL_TIM_Base_MspInit+0x6c>)
 80008fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000902:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_TIM_Base_MspInit+0x6c>)
 8000908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800090c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000914:	e013      	b.n	800093e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a0e      	ldr	r2, [pc, #56]	@ (8000954 <HAL_TIM_Base_MspInit+0x70>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d10e      	bne.n	800093e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_TIM_Base_MspInit+0x6c>)
 8000922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_TIM_Base_MspInit+0x6c>)
 8000928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800092c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <HAL_TIM_Base_MspInit+0x6c>)
 8000932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40013400 	.word	0x40013400
 8000950:	44020c00 	.word	0x44020c00
 8000954:	40014000 	.word	0x40014000

08000958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	@ 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a48      	ldr	r2, [pc, #288]	@ (8000a98 <HAL_TIM_MspPostInit+0x140>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d120      	bne.n	80009bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b48      	ldr	r3, [pc, #288]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000980:	4a46      	ldr	r2, [pc, #280]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800098a:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000998:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	483a      	ldr	r0, [pc, #232]	@ (8000aa0 <HAL_TIM_MspPostInit+0x148>)
 80009b6:	f000 fb73 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80009ba:	e068      	b.n	8000a8e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM8)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <HAL_TIM_MspPostInit+0x14c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d13f      	bne.n	8000a46 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b35      	ldr	r3, [pc, #212]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 80009c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009cc:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d6:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 80009d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 80009e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ea:	4a2c      	ldr	r2, [pc, #176]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f4:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 80009f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a02:	2320      	movs	r3, #32
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4820      	ldr	r0, [pc, #128]	@ (8000aa0 <HAL_TIM_MspPostInit+0x148>)
 8000a1e:	f000 fb3f 	bl	80010a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <HAL_TIM_MspPostInit+0x150>)
 8000a40:	f000 fb2e 	bl	80010a0 <HAL_GPIO_Init>
}
 8000a44:	e023      	b.n	8000a8e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM15)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <HAL_TIM_MspPostInit+0x154>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d11e      	bne.n	8000a8e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 8000a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a56:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_TIM_MspPostInit+0x144>)
 8000a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <HAL_TIM_MspPostInit+0x148>)
 8000a8a:	f000 fb09 	bl	80010a0 <HAL_GPIO_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	@ 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40012c00 	.word	0x40012c00
 8000a9c:	44020c00 	.word	0x44020c00
 8000aa0:	42020000 	.word	0x42020000
 8000aa4:	40013400 	.word	0x40013400
 8000aa8:	42020400 	.word	0x42020400
 8000aac:	40014000 	.word	0x40014000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f947 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b16:	4b35      	ldr	r3, [pc, #212]	@ (8000bec <SystemInit+0xdc>)
 8000b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1c:	4a33      	ldr	r2, [pc, #204]	@ (8000bec <SystemInit+0xdc>)
 8000b1e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000b26:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <SystemInit+0xe0>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <SystemInit+0xe0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b32:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <SystemInit+0xe0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000b38:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <SystemInit+0xe0>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	492c      	ldr	r1, [pc, #176]	@ (8000bf0 <SystemInit+0xe0>)
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <SystemInit+0xe4>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <SystemInit+0xe0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <SystemInit+0xe0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <SystemInit+0xe0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <SystemInit+0xe0>)
 8000b58:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <SystemInit+0xe8>)
 8000b5a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <SystemInit+0xe0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <SystemInit+0xe0>)
 8000b64:	4a24      	ldr	r2, [pc, #144]	@ (8000bf8 <SystemInit+0xe8>)
 8000b66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <SystemInit+0xe0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <SystemInit+0xe0>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <SystemInit+0xe8>)
 8000b72:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <SystemInit+0xe0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <SystemInit+0xe0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <SystemInit+0xe0>)
 8000b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <SystemInit+0xe0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <SystemInit+0xdc>)
 8000b8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b92:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <SystemInit+0xec>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b9c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000ba4:	d003      	beq.n	8000bae <SystemInit+0x9e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000bac:	d117      	bne.n	8000bde <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SystemInit+0xec>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d005      	beq.n	8000bc6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <SystemInit+0xec>)
 8000bbc:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <SystemInit+0xf0>)
 8000bbe:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <SystemInit+0xec>)
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <SystemInit+0xf4>)
 8000bc4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <SystemInit+0xec>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <SystemInit+0xec>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <SystemInit+0xec>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a09      	ldr	r2, [pc, #36]	@ (8000bfc <SystemInit+0xec>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	61d3      	str	r3, [r2, #28]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	44020c00 	.word	0x44020c00
 8000bf4:	eae2eae3 	.word	0xeae2eae3
 8000bf8:	01010280 	.word	0x01010280
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	08192a3b 	.word	0x08192a3b
 8000c04:	4c5d6e7f 	.word	0x4c5d6e7f

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f7ff ff80 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c36:	f003 f873 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fb2b 	bl	8000294 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c4c:	08003d98 	.word	0x08003d98
  ldr r2, =_sbss
 8000c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c54:	20000110 	.word	0x20000110

08000c58 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f948 	bl	8000ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c66:	f001 f95d 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_Init+0x44>)
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	f003 030f 	and.w	r3, r3, #15
 8000c74:	490b      	ldr	r1, [pc, #44]	@ (8000ca4 <HAL_Init+0x48>)
 8000c76:	5ccb      	ldrb	r3, [r1, r3]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_Init+0x4c>)
 8000c7e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c80:	2004      	movs	r0, #4
 8000c82:	f000 f97f 	bl	8000f84 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f810 	bl	8000cac <HAL_InitTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e002      	b.n	8000c9c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c96:	f7ff fdfb 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	44020c00 	.word	0x44020c00
 8000ca4:	08003d80 	.word	0x08003d80
 8000ca8:	20000000 	.word	0x20000000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000cb8:	4b33      	ldr	r3, [pc, #204]	@ (8000d88 <HAL_InitTick+0xdc>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e05c      	b.n	8000d7e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000cc4:	4b31      	ldr	r3, [pc, #196]	@ (8000d8c <HAL_InitTick+0xe0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d10c      	bne.n	8000cea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <HAL_InitTick+0xe4>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d88 <HAL_InitTick+0xdc>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e037      	b.n	8000d5a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cea:	f000 f9a3 	bl	8001034 <HAL_SYSTICK_GetCLKSourceConfig>
 8000cee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d023      	beq.n	8000d3e <HAL_InitTick+0x92>
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d82d      	bhi.n	8000d58 <HAL_InitTick+0xac>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_InitTick+0x5e>
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d00d      	beq.n	8000d24 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000d08:	e026      	b.n	8000d58 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <HAL_InitTick+0xe4>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_InitTick+0xdc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d20:	60fb      	str	r3, [r7, #12]
        break;
 8000d22:	e01a      	b.n	8000d5a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_InitTick+0xdc>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d32:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	60fb      	str	r3, [r7, #12]
        break;
 8000d3c:	e00d      	b.n	8000d5a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d3e:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_InitTick+0xdc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	60fb      	str	r3, [r7, #12]
        break;
 8000d56:	e000      	b.n	8000d5a <HAL_InitTick+0xae>
        break;
 8000d58:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f8f0 	bl	8000f40 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e009      	b.n	8000d7e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d72:	f000 f8cb 	bl	8000f0c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d76:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_InitTick+0xe8>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	e000e010 	.word	0xe000e010
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000010c 	.word	0x2000010c

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff6a 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1a:	f7ff ff81 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff ffb3 	bl	8000e90 <NVIC_EncodePriority>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff82 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00d      	b.n	8000f72 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <HAL_SYSTICK_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_SYSTICK_Config+0x40>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_SYSTICK_Config+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <HAL_SYSTICK_Config+0x40>)
 8000f6a:	f043 0303 	orr.w	r3, r3, #3
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d844      	bhi.n	800101c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000f92:	a201      	add	r2, pc, #4	@ (adr r2, 8000f98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08000fbb 	.word	0x08000fbb
 8000f9c:	08000fd9 	.word	0x08000fd9
 8000fa0:	08000ffb 	.word	0x08000ffb
 8000fa4:	0800101d 	.word	0x0800101d
 8000fa8:	08000fad 	.word	0x08000fad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6013      	str	r3, [r2, #0]
      break;
 8000fb8:	e031      	b.n	800101e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fce:	f023 030c 	bic.w	r3, r3, #12
 8000fd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fd6:	e022      	b.n	800101e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a13      	ldr	r2, [pc, #76]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fde:	f023 0304 	bic.w	r3, r3, #4
 8000fe2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fea:	f023 030c 	bic.w	r3, r3, #12
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ff8:	e011      	b.n	800101e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800100c:	f023 030c 	bic.w	r3, r3, #12
 8001010:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800101a:	e000      	b.n	800101e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800101c:	bf00      	nop
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010
 8001030:	44020c00 	.word	0x44020c00

08001034 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001046:	2304      	movs	r3, #4
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	e01e      	b.n	800108a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800104e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d00f      	beq.n	800107e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b08      	cmp	r3, #8
 8001062:	d80f      	bhi.n	8001084 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d003      	beq.n	8001078 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001070:	e008      	b.n	8001084 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
        break;
 8001076:	e008      	b.n	800108a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001078:	2301      	movs	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
        break;
 800107c:	e005      	b.n	800108a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800107e:	2302      	movs	r3, #2
 8001080:	607b      	str	r3, [r7, #4]
        break;
 8001082:	e002      	b.n	800108a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
        break;
 8001088:	bf00      	nop
    }
  }
  return systick_source;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e010 	.word	0xe000e010
 800109c:	44020c00 	.word	0x44020c00

080010a0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010ae:	e136      	b.n	800131e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8128 	beq.w	8001318 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x38>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	d125      	bne.n	8001124 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	f003 020f 	and.w	r2, r3, #15
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4313      	orrs	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d00b      	beq.n	8001178 <HAL_GPIO_Init+0xd8>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116c:	2b11      	cmp	r3, #17
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4313      	orrs	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4013      	ands	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f003 0201 	and.w	r2, r3, #1
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d017      	beq.n	8001212 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4013      	ands	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4313      	orrs	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d07c      	beq.n	8001318 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800121e:	4a47      	ldr	r2, [pc, #284]	@ (800133c <HAL_GPIO_Init+0x29c>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3318      	adds	r3, #24
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4013      	ands	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0a9a      	lsrs	r2, r3, #10
 8001246:	4b3e      	ldr	r3, [pc, #248]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 8001248:	4013      	ands	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	4093      	lsls	r3, r2
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800125a:	4938      	ldr	r1, [pc, #224]	@ (800133c <HAL_GPIO_Init+0x29c>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3318      	adds	r3, #24
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001268:	4b34      	ldr	r3, [pc, #208]	@ (800133c <HAL_GPIO_Init+0x29c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800128c:	4a2b      	ldr	r2, [pc, #172]	@ (800133c <HAL_GPIO_Init+0x29c>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <HAL_GPIO_Init+0x29c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	4013      	ands	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80012b6:	4a21      	ldr	r2, [pc, #132]	@ (800133c <HAL_GPIO_Init+0x29c>)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <HAL_GPIO_Init+0x29c>)
 80012be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4013      	ands	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80012e2:	4a16      	ldr	r2, [pc, #88]	@ (800133c <HAL_GPIO_Init+0x29c>)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80012ea:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_GPIO_Init+0x29c>)
 80012ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001310:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <HAL_GPIO_Init+0x29c>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	3301      	adds	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	f47f aec1 	bne.w	80010b0 <HAL_GPIO_Init+0x10>
  }
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	44022000 	.word	0x44022000
 8001340:	002f7f7f 	.word	0x002f7f7f

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	f000 bc28 	b.w	8001ba8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001358:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	f003 0318 	and.w	r3, r3, #24
 8001360:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001362:	4b92      	ldr	r3, [pc, #584]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d05b      	beq.n	8001430 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x46>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	2b18      	cmp	r3, #24
 8001382:	d114      	bne.n	80013ae <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d111      	bne.n	80013ae <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	f000 bc08 	b.w	8001ba8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001398:	4b84      	ldr	r3, [pc, #528]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	4981      	ldr	r1, [pc, #516]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80013ac:	e040      	b.n	8001430 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d023      	beq.n	80013fe <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013b6:	4b7d      	ldr	r3, [pc, #500]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7c      	ldr	r2, [pc, #496]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fcfd 	bl	8000dc0 <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80013ca:	f7ff fcf9 	bl	8000dc0 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e3e5      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013dc:	4b73      	ldr	r3, [pc, #460]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80013e8:	4b70      	ldr	r3, [pc, #448]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	496d      	ldr	r1, [pc, #436]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	618b      	str	r3, [r1, #24]
 80013fc:	e018      	b.n	8001430 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013fe:	4b6b      	ldr	r3, [pc, #428]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6a      	ldr	r2, [pc, #424]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fcd9 	bl	8000dc0 <HAL_GetTick>
 800140e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001412:	f7ff fcd5 	bl	8000dc0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e3c1      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001424:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a0 	beq.w	800157e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b10      	cmp	r3, #16
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x10c>
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b18      	cmp	r3, #24
 8001448:	d109      	bne.n	800145e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 8092 	bne.w	800157e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e3a4      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x132>
 8001468:	4b50      	ldr	r3, [pc, #320]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4f      	ldr	r2, [pc, #316]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e058      	b.n	8001528 <HAL_RCC_OscConfig+0x1e4>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x160>
 800147e:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a4a      	ldr	r2, [pc, #296]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b48      	ldr	r3, [pc, #288]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a47      	ldr	r2, [pc, #284]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001490:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a44      	ldr	r2, [pc, #272]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800149c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e041      	b.n	8001528 <HAL_RCC_OscConfig+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x190>
 80014ae:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a3b      	ldr	r2, [pc, #236]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a38      	ldr	r2, [pc, #224]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e029      	b.n	8001528 <HAL_RCC_OscConfig+0x1e4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80014dc:	d112      	bne.n	8001504 <HAL_RCC_OscConfig+0x1c0>
 80014de:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a32      	ldr	r2, [pc, #200]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2f      	ldr	r2, [pc, #188]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a2c      	ldr	r2, [pc, #176]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e011      	b.n	8001528 <HAL_RCC_OscConfig+0x1e4>
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001522:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc46 	bl	8000dc0 <HAL_GetTick>
 8001534:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001538:	f7ff fc42 	bl	8000dc0 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e32e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x1f4>
 8001556:	e012      	b.n	800157e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc32 	bl	8000dc0 <HAL_GetTick>
 800155c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc2e 	bl	8000dc0 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e31a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_RCC_OscConfig+0x268>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 809a 	beq.w	80016c0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x25a>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	2b18      	cmp	r3, #24
 8001596:	d149      	bne.n	800162c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d146      	bne.n	800162c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d104      	bne.n	80015b0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e2fe      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
 80015aa:	bf00      	nop
 80015ac:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80015b6:	4b9a      	ldr	r3, [pc, #616]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0218 	and.w	r2, r3, #24
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d014      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80015c6:	4b96      	ldr	r3, [pc, #600]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0218 	bic.w	r2, r3, #24
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4993      	ldr	r1, [pc, #588]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80015d8:	f000 fdd0 	bl	800217c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015dc:	4b91      	ldr	r3, [pc, #580]	@ (8001824 <HAL_RCC_OscConfig+0x4e0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fb63 	bl	8000cac <HAL_InitTick>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e2db      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbe6 	bl	8000dc0 <HAL_GetTick>
 80015f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fbe2 	bl	8000dc0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2ce      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160a:	4b85      	ldr	r3, [pc, #532]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001616:	4b82      	ldr	r3, [pc, #520]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	497e      	ldr	r1, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800162a:	e049      	b.n	80016c0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02c      	beq.n	800168e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001634:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 0218 	bic.w	r2, r3, #24
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4977      	ldr	r1, [pc, #476]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001646:	4b76      	ldr	r3, [pc, #472]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a75      	ldr	r2, [pc, #468]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fbb5 	bl	8000dc0 <HAL_GetTick>
 8001656:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800165a:	f7ff fbb1 	bl	8000dc0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e29d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800166c:	4b6c      	ldr	r3, [pc, #432]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001678:	4b69      	ldr	r3, [pc, #420]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	4966      	ldr	r1, [pc, #408]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001688:	4313      	orrs	r3, r2
 800168a:	610b      	str	r3, [r1, #16]
 800168c:	e018      	b.n	80016c0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168e:	4b64      	ldr	r3, [pc, #400]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a63      	ldr	r2, [pc, #396]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb91 	bl	8000dc0 <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb8d 	bl	8000dc0 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e279      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03c      	beq.n	8001746 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01c      	beq.n	800170e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d4:	4b52      	ldr	r3, [pc, #328]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016da:	4a51      	ldr	r2, [pc, #324]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80016dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fb6c 	bl	8000dc0 <HAL_GetTick>
 80016e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fb68 	bl	8000dc0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e254      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016fe:	4b48      	ldr	r3, [pc, #288]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ef      	beq.n	80016ec <HAL_RCC_OscConfig+0x3a8>
 800170c:	e01b      	b.n	8001746 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001714:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001716:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800171a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fb4f 	bl	8000dc0 <HAL_GetTick>
 8001722:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001726:	f7ff fb4b 	bl	8000dc0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e237      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 800173a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800173e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ef      	bne.n	8001726 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80d2 	beq.w	80018f8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001754:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <HAL_RCC_OscConfig+0x4e4>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d118      	bne.n	8001792 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <HAL_RCC_OscConfig+0x4e4>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	4a30      	ldr	r2, [pc, #192]	@ (8001828 <HAL_RCC_OscConfig+0x4e4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff fb28 	bl	8000dc0 <HAL_GetTick>
 8001770:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff fb24 	bl	8000dc0 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e210      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <HAL_RCC_OscConfig+0x4e4>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_RCC_OscConfig+0x468>
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 800179c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017aa:	e074      	b.n	8001896 <HAL_RCC_OscConfig+0x552>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d118      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4a2>
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ba:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017c4:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ca:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017da:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017e4:	e057      	b.n	8001896 <HAL_RCC_OscConfig+0x552>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d11e      	bne.n	800182c <HAL_RCC_OscConfig+0x4e8>
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800180a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001814:	4a02      	ldr	r2, [pc, #8]	@ (8001820 <HAL_RCC_OscConfig+0x4dc>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800181e:	e03a      	b.n	8001896 <HAL_RCC_OscConfig+0x552>
 8001820:	44020c00 	.word	0x44020c00
 8001824:	20000004 	.word	0x20000004
 8001828:	44020800 	.word	0x44020800
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b85      	cmp	r3, #133	@ 0x85
 8001832:	d118      	bne.n	8001866 <HAL_RCC_OscConfig+0x522>
 8001834:	4ba2      	ldr	r3, [pc, #648]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800183a:	4aa1      	ldr	r2, [pc, #644]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001844:	4b9e      	ldr	r3, [pc, #632]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800184a:	4a9d      	ldr	r2, [pc, #628]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001850:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001854:	4b9a      	ldr	r3, [pc, #616]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800185a:	4a99      	ldr	r2, [pc, #612]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001864:	e017      	b.n	8001896 <HAL_RCC_OscConfig+0x552>
 8001866:	4b96      	ldr	r3, [pc, #600]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800186c:	4a94      	ldr	r2, [pc, #592]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001876:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800187c:	4a90      	ldr	r2, [pc, #576]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001886:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800188c:	4a8c      	ldr	r2, [pc, #560]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800188e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fa8f 	bl	8000dc0 <HAL_GetTick>
 80018a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fa8b 	bl	8000dc0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e175      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018bc:	4b80      	ldr	r3, [pc, #512]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 80018be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0ed      	beq.n	80018a6 <HAL_RCC_OscConfig+0x562>
 80018ca:	e015      	b.n	80018f8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff fa78 	bl	8000dc0 <HAL_GetTick>
 80018d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fa74 	bl	8000dc0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e15e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ea:	4b75      	ldr	r3, [pc, #468]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 80018ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ed      	bne.n	80018d4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d036      	beq.n	8001972 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	2b00      	cmp	r3, #0
 800190a:	d019      	beq.n	8001940 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800190c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001912:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fa52 	bl	8000dc0 <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001920:	f7ff fa4e 	bl	8000dc0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e13a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001932:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x5dc>
 800193e:	e018      	b.n	8001972 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001940:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800194a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fa38 	bl	8000dc0 <HAL_GetTick>
 8001950:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001954:	f7ff fa34 	bl	8000dc0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e120      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001966:	4b56      	ldr	r3, [pc, #344]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8115 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b18      	cmp	r3, #24
 8001980:	f000 80af 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	2b02      	cmp	r3, #2
 800198a:	f040 8086 	bne.w	8001a9a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800198e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fa11 	bl	8000dc0 <HAL_GetTick>
 800199e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fa0d 	bl	8000dc0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0f9      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80019b4:	4b42      	ldr	r3, [pc, #264]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80019c0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019c8:	f023 0303 	bic.w	r3, r3, #3
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	430a      	orrs	r2, r1
 80019d8:	4939      	ldr	r1, [pc, #228]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	3b01      	subs	r3, #1
 80019ee:	025b      	lsls	r3, r3, #9
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	3b01      	subs	r3, #1
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	3b01      	subs	r3, #1
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a0e:	492c      	ldr	r1, [pc, #176]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001a14:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	4a29      	ldr	r2, [pc, #164]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a1a:	f023 0310 	bic.w	r3, r3, #16
 8001a1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a24:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001a2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	f023 020c 	bic.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	491f      	ldr	r1, [pc, #124]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	f023 0220 	bic.w	r2, r3, #32
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a54:	491a      	ldr	r1, [pc, #104]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	4a18      	ldr	r2, [pc, #96]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a64:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f9a5 	bl	8000dc0 <HAL_GetTick>
 8001a76:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f9a1 	bl	8000dc0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e08d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x736>
 8001a98:	e085      	b.n	8001ba6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_RCC_OscConfig+0x77c>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f98b 	bl	8000dc0 <HAL_GetTick>
 8001aaa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f987 	bl	8000dc0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d903      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e073      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
 8001ac0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ad0:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	4a36      	ldr	r2, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001ad6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ae0:	e061      	b.n	8001ba6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ae2:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ae8:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aec:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d031      	beq.n	8001b5a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d12a      	bne.n	8001b5a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d122      	bne.n	8001b5a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d11a      	bne.n	8001b5a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0a5b      	lsrs	r3, r3, #9
 8001b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b30:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d111      	bne.n	8001b5a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b42:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d108      	bne.n	8001b5a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	0e1b      	lsrs	r3, r3, #24
 8001b4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e024      	b.n	8001ba8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d01a      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001b76:	f023 0310 	bic.w	r3, r3, #16
 8001b7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f920 	bl	8000dc0 <HAL_GetTick>
 8001b80:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001b82:	bf00      	nop
 8001b84:	f7ff f91c 	bl	8000dc0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d0f9      	beq.n	8001b84 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9e:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <HAL_RCC_OscConfig+0x86c>)
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	44020c00 	.word	0x44020c00

08001bb4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e19e      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b83      	ldr	r3, [pc, #524]	@ (8001dd8 <HAL_RCC_ClockConfig+0x224>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d910      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b80      	ldr	r3, [pc, #512]	@ (8001dd8 <HAL_RCC_ClockConfig+0x224>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 020f 	bic.w	r2, r3, #15
 8001bde:	497e      	ldr	r1, [pc, #504]	@ (8001dd8 <HAL_RCC_ClockConfig+0x224>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd8 <HAL_RCC_ClockConfig+0x224>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e186      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	4b74      	ldr	r3, [pc, #464]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d909      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001c16:	4b71      	ldr	r3, [pc, #452]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	496d      	ldr	r1, [pc, #436]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d012      	beq.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	4b68      	ldr	r3, [pc, #416]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d909      	bls.n	8001c5c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c48:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4961      	ldr	r1, [pc, #388]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c78:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4955      	ldr	r1, [pc, #340]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4b50      	ldr	r3, [pc, #320]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	f023 020f 	bic.w	r2, r3, #15
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	494a      	ldr	r1, [pc, #296]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8093 	beq.w	8001dec <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cce:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d121      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e113      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e107      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001cfe:	4b37      	ldr	r3, [pc, #220]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0fb      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0e:	4b33      	ldr	r3, [pc, #204]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0f3      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	492c      	ldr	r1, [pc, #176]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff f846 	bl	8000dc0 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f83e 	bl	8000dc0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0d7      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d56:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0318 	and.w	r3, r3, #24
 8001d5e:	2b18      	cmp	r3, #24
 8001d60:	d1ee      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x18c>
 8001d62:	e043      	b.n	8001dec <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d112      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7ff f827 	bl	8000dc0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0c0      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f003 0318 	and.w	r3, r3, #24
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
 8001d90:	e02c      	b.n	8001dec <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d122      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff f810 	bl	8000dc0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0a9      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_RCC_ClockConfig+0x228>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0318 	and.w	r3, r3, #24
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x1e8>
 8001dbe:	e015      	b.n	8001dec <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7fe fffe 	bl	8000dc0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d906      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e097      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f003 0318 	and.w	r3, r3, #24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e9      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d010      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	4b44      	ldr	r3, [pc, #272]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d208      	bcs.n	8001e1a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001e08:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 020f 	bic.w	r2, r3, #15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	493e      	ldr	r1, [pc, #248]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f14 <HAL_RCC_ClockConfig+0x360>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d210      	bcs.n	8001e4a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e28:	4b3a      	ldr	r3, [pc, #232]	@ (8001f14 <HAL_RCC_ClockConfig+0x360>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 020f 	bic.w	r2, r3, #15
 8001e30:	4938      	ldr	r1, [pc, #224]	@ (8001f14 <HAL_RCC_ClockConfig+0x360>)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e38:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <HAL_RCC_ClockConfig+0x360>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e05d      	b.n	8001f06 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d208      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e66:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4927      	ldr	r1, [pc, #156]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d209      	bcs.n	8001eaa <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	491a      	ldr	r1, [pc, #104]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d012      	beq.n	8001edc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d209      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	490e      	ldr	r1, [pc, #56]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001edc:	f000 f822 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_RCC_ClockConfig+0x35c>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	490b      	ldr	r1, [pc, #44]	@ (8001f18 <HAL_RCC_ClockConfig+0x364>)
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_RCC_ClockConfig+0x368>)
 8001ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_RCC_ClockConfig+0x36c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fed6 	bl	8000cac <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001f04:	7afb      	ldrb	r3, [r7, #11]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	44020c00 	.word	0x44020c00
 8001f14:	40022000 	.word	0x40022000
 8001f18:	08003d80 	.word	0x08003d80
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001f2a:	4b8c      	ldr	r3, [pc, #560]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0318 	and.w	r3, r3, #24
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f36:	4b8a      	ldr	r3, [pc, #552]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e107      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3c:	4b87      	ldr	r3, [pc, #540]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 0318 	and.w	r3, r3, #24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d112      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f48:	4b84      	ldr	r3, [pc, #528]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f54:	4b81      	ldr	r3, [pc, #516]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	4a81      	ldr	r2, [pc, #516]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e0f1      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001f68:	4b7e      	ldr	r3, [pc, #504]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	e0ee      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0318 	and.w	r3, r3, #24
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x244>)
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e0e5      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b76      	ldr	r3, [pc, #472]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f003 0318 	and.w	r3, r3, #24
 8001f88:	2b18      	cmp	r3, #24
 8001f8a:	f040 80dd 	bne.w	8002148 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001f8e:	4b73      	ldr	r3, [pc, #460]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001f98:	4b70      	ldr	r3, [pc, #448]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80b7 	beq.w	8002142 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d056      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x16a>
 8001fe0:	e077      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02d      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001fee:	4b5b      	ldr	r3, [pc, #364]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x240>)
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002018:	4b50      	ldr	r3, [pc, #320]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002028:	ed97 6a02 	vldr	s12, [r7, #8]
 800202c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800216c <HAL_RCC_GetSysClockFreq+0x248>
 8002030:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002034:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800203c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002048:	e065      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002054:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002170 <HAL_RCC_GetSysClockFreq+0x24c>
 8002058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205c:	4b3f      	ldr	r3, [pc, #252]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 800205e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800206c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002070:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800216c <HAL_RCC_GetSysClockFreq+0x248>
 8002074:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002078:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800207c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002080:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002088:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800208c:	e043      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002098:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002174 <HAL_RCC_GetSysClockFreq+0x250>
 800209c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a0:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 80020a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800216c <HAL_RCC_GetSysClockFreq+0x248>
 80020b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020cc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80020d0:	e021      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020dc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002178 <HAL_RCC_GetSysClockFreq+0x254>
 80020e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 80020e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800216c <HAL_RCC_GetSysClockFreq+0x248>
 80020fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002100:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002108:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002114:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_RCC_GetSysClockFreq+0x238>)
 8002118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002120:	3301      	adds	r3, #1
 8002122:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800212e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213a:	ee17 3a90 	vmov	r3, s15
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	e004      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e001      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x240>)
 800214a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800214c:	69fb      	ldr	r3, [r7, #28]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	44020c00 	.word	0x44020c00
 8002160:	003d0900 	.word	0x003d0900
 8002164:	03d09000 	.word	0x03d09000
 8002168:	017d7840 	.word	0x017d7840
 800216c:	46000000 	.word	0x46000000
 8002170:	4c742400 	.word	0x4c742400
 8002174:	4bbebc20 	.word	0x4bbebc20
 8002178:	4a742400 	.word	0x4a742400

0800217c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002180:	f7ff fed0 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800218a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800218e:	4907      	ldr	r1, [pc, #28]	@ (80021ac <HAL_RCC_GetHCLKFreq+0x30>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002192:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800219c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x34>)
 80021a0:	681b      	ldr	r3, [r3, #0]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	44020c00 	.word	0x44020c00
 80021ac:	08003d80 	.word	0x08003d80
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e049      	b.n	800225a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fb82 	bl	80008e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fd46 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e049      	b.n	8002308 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f841 	bl	8002310 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f000 fcef 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_TIM_OC_Start+0x24>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e03c      	b.n	80023c2 <HAL_TIM_OC_Start+0x9e>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d109      	bne.n	8002362 <HAL_TIM_OC_Start+0x3e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	e02f      	b.n	80023c2 <HAL_TIM_OC_Start+0x9e>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d109      	bne.n	800237c <HAL_TIM_OC_Start+0x58>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e022      	b.n	80023c2 <HAL_TIM_OC_Start+0x9e>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d109      	bne.n	8002396 <HAL_TIM_OC_Start+0x72>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	bf14      	ite	ne
 800238e:	2301      	movne	r3, #1
 8002390:	2300      	moveq	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e015      	b.n	80023c2 <HAL_TIM_OC_Start+0x9e>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b10      	cmp	r3, #16
 800239a:	d109      	bne.n	80023b0 <HAL_TIM_OC_Start+0x8c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e008      	b.n	80023c2 <HAL_TIM_OC_Start+0x9e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0ce      	b.n	8002568 <HAL_TIM_OC_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_TIM_OC_Start+0xb6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d8:	e023      	b.n	8002422 <HAL_TIM_OC_Start+0xfe>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d104      	bne.n	80023ea <HAL_TIM_OC_Start+0xc6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e8:	e01b      	b.n	8002422 <HAL_TIM_OC_Start+0xfe>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_OC_Start+0xd6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f8:	e013      	b.n	8002422 <HAL_TIM_OC_Start+0xfe>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d104      	bne.n	800240a <HAL_TIM_OC_Start+0xe6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002408:	e00b      	b.n	8002422 <HAL_TIM_OC_Start+0xfe>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b10      	cmp	r3, #16
 800240e:	d104      	bne.n	800241a <HAL_TIM_OC_Start+0xf6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002418:	e003      	b.n	8002422 <HAL_TIM_OC_Start+0xfe>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2201      	movs	r2, #1
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f001 f9b1 	bl	8003792 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	@ (8002570 <HAL_TIM_OC_Start+0x24c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_TIM_OC_Start+0x148>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4d      	ldr	r2, [pc, #308]	@ (8002574 <HAL_TIM_OC_Start+0x250>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_TIM_OC_Start+0x148>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4b      	ldr	r2, [pc, #300]	@ (8002578 <HAL_TIM_OC_Start+0x254>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_TIM_OC_Start+0x148>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a4a      	ldr	r2, [pc, #296]	@ (800257c <HAL_TIM_OC_Start+0x258>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_TIM_OC_Start+0x148>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a48      	ldr	r2, [pc, #288]	@ (8002580 <HAL_TIM_OC_Start+0x25c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_OC_Start+0x148>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a47      	ldr	r2, [pc, #284]	@ (8002584 <HAL_TIM_OC_Start+0x260>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_TIM_OC_Start+0x14c>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_TIM_OC_Start+0x14e>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a39      	ldr	r2, [pc, #228]	@ (8002570 <HAL_TIM_OC_Start+0x24c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d04a      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a37      	ldr	r2, [pc, #220]	@ (8002574 <HAL_TIM_OC_Start+0x250>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d045      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a2:	d040      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ac:	d03b      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <HAL_TIM_OC_Start+0x264>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d036      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a33      	ldr	r2, [pc, #204]	@ (800258c <HAL_TIM_OC_Start+0x268>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d031      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <HAL_TIM_OC_Start+0x26c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d02c      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a30      	ldr	r2, [pc, #192]	@ (8002594 <HAL_TIM_OC_Start+0x270>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d027      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2f      	ldr	r2, [pc, #188]	@ (8002598 <HAL_TIM_OC_Start+0x274>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2d      	ldr	r2, [pc, #180]	@ (800259c <HAL_TIM_OC_Start+0x278>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01d      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a22      	ldr	r2, [pc, #136]	@ (8002578 <HAL_TIM_OC_Start+0x254>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a20      	ldr	r2, [pc, #128]	@ (800257c <HAL_TIM_OC_Start+0x258>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_TIM_OC_Start+0x27c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <HAL_TIM_OC_Start+0x280>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1a      	ldr	r2, [pc, #104]	@ (8002580 <HAL_TIM_OC_Start+0x25c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_TIM_OC_Start+0x202>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <HAL_TIM_OC_Start+0x260>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d115      	bne.n	8002552 <HAL_TIM_OC_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_TIM_OC_Start+0x284>)
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d015      	beq.n	8002564 <HAL_TIM_OC_Start+0x240>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253e:	d011      	beq.n	8002564 <HAL_TIM_OC_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002550:	e008      	b.n	8002564 <HAL_TIM_OC_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e000      	b.n	8002566 <HAL_TIM_OC_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40012c00 	.word	0x40012c00
 8002574:	50012c00 	.word	0x50012c00
 8002578:	40013400 	.word	0x40013400
 800257c:	50013400 	.word	0x50013400
 8002580:	40014000 	.word	0x40014000
 8002584:	50014000 	.word	0x50014000
 8002588:	40000400 	.word	0x40000400
 800258c:	50000400 	.word	0x50000400
 8002590:	40000800 	.word	0x40000800
 8002594:	50000800 	.word	0x50000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	50000c00 	.word	0x50000c00
 80025a0:	40001800 	.word	0x40001800
 80025a4:	50001800 	.word	0x50001800
 80025a8:	00010007 	.word	0x00010007

080025ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e049      	b.n	8002652 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f964 	bl	80008a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fb4a 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_TIM_PWM_Start+0x24>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e03c      	b.n	80026fa <HAL_TIM_PWM_Start+0x9e>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d109      	bne.n	800269a <HAL_TIM_PWM_Start+0x3e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e02f      	b.n	80026fa <HAL_TIM_PWM_Start+0x9e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d109      	bne.n	80026b4 <HAL_TIM_PWM_Start+0x58>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e022      	b.n	80026fa <HAL_TIM_PWM_Start+0x9e>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d109      	bne.n	80026ce <HAL_TIM_PWM_Start+0x72>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	e015      	b.n	80026fa <HAL_TIM_PWM_Start+0x9e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d109      	bne.n	80026e8 <HAL_TIM_PWM_Start+0x8c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e008      	b.n	80026fa <HAL_TIM_PWM_Start+0x9e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0ce      	b.n	80028a0 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Start+0xb6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002710:	e023      	b.n	800275a <HAL_TIM_PWM_Start+0xfe>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_PWM_Start+0xc6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002720:	e01b      	b.n	800275a <HAL_TIM_PWM_Start+0xfe>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Start+0xd6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002730:	e013      	b.n	800275a <HAL_TIM_PWM_Start+0xfe>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d104      	bne.n	8002742 <HAL_TIM_PWM_Start+0xe6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002740:	e00b      	b.n	800275a <HAL_TIM_PWM_Start+0xfe>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b10      	cmp	r3, #16
 8002746:	d104      	bne.n	8002752 <HAL_TIM_PWM_Start+0xf6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	e003      	b.n	800275a <HAL_TIM_PWM_Start+0xfe>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f001 f815 	bl	8003792 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4e      	ldr	r2, [pc, #312]	@ (80028a8 <HAL_TIM_PWM_Start+0x24c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_TIM_PWM_Start+0x148>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a4d      	ldr	r2, [pc, #308]	@ (80028ac <HAL_TIM_PWM_Start+0x250>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_TIM_PWM_Start+0x148>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4b      	ldr	r2, [pc, #300]	@ (80028b0 <HAL_TIM_PWM_Start+0x254>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00e      	beq.n	80027a4 <HAL_TIM_PWM_Start+0x148>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4a      	ldr	r2, [pc, #296]	@ (80028b4 <HAL_TIM_PWM_Start+0x258>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_TIM_PWM_Start+0x148>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a48      	ldr	r2, [pc, #288]	@ (80028b8 <HAL_TIM_PWM_Start+0x25c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_TIM_PWM_Start+0x148>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a47      	ldr	r2, [pc, #284]	@ (80028bc <HAL_TIM_PWM_Start+0x260>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_TIM_PWM_Start+0x14c>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_TIM_PWM_Start+0x14e>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a39      	ldr	r2, [pc, #228]	@ (80028a8 <HAL_TIM_PWM_Start+0x24c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d04a      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a37      	ldr	r2, [pc, #220]	@ (80028ac <HAL_TIM_PWM_Start+0x250>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d045      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027da:	d040      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e4:	d03b      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a35      	ldr	r2, [pc, #212]	@ (80028c0 <HAL_TIM_PWM_Start+0x264>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d036      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a33      	ldr	r2, [pc, #204]	@ (80028c4 <HAL_TIM_PWM_Start+0x268>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d031      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a32      	ldr	r2, [pc, #200]	@ (80028c8 <HAL_TIM_PWM_Start+0x26c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d02c      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	@ (80028cc <HAL_TIM_PWM_Start+0x270>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d027      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2f      	ldr	r2, [pc, #188]	@ (80028d0 <HAL_TIM_PWM_Start+0x274>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2d      	ldr	r2, [pc, #180]	@ (80028d4 <HAL_TIM_PWM_Start+0x278>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <HAL_TIM_PWM_Start+0x254>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a20      	ldr	r2, [pc, #128]	@ (80028b4 <HAL_TIM_PWM_Start+0x258>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a27      	ldr	r2, [pc, #156]	@ (80028d8 <HAL_TIM_PWM_Start+0x27c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a25      	ldr	r2, [pc, #148]	@ (80028dc <HAL_TIM_PWM_Start+0x280>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <HAL_TIM_PWM_Start+0x25c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIM_PWM_Start+0x202>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_TIM_PWM_Start+0x260>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d115      	bne.n	800288a <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <HAL_TIM_PWM_Start+0x284>)
 8002866:	4013      	ands	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d015      	beq.n	800289c <HAL_TIM_PWM_Start+0x240>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002876:	d011      	beq.n	800289c <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	e008      	b.n	800289c <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e000      	b.n	800289e <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	50012c00 	.word	0x50012c00
 80028b0:	40013400 	.word	0x40013400
 80028b4:	50013400 	.word	0x50013400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	50014000 	.word	0x50014000
 80028c0:	40000400 	.word	0x40000400
 80028c4:	50000400 	.word	0x50000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	50000800 	.word	0x50000800
 80028d0:	40000c00 	.word	0x40000c00
 80028d4:	50000c00 	.word	0x50000c00
 80028d8:	40001800 	.word	0x40001800
 80028dc:	50001800 	.word	0x50001800
 80028e0:	00010007 	.word	0x00010007

080028e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_OC_ConfigChannel+0x1e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e066      	b.n	80029d0 <HAL_TIM_OC_ConfigChannel+0xec>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b14      	cmp	r3, #20
 800290e:	d857      	bhi.n	80029c0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002910:	a201      	add	r2, pc, #4	@ (adr r2, 8002918 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	0800296d 	.word	0x0800296d
 800291c:	080029c1 	.word	0x080029c1
 8002920:	080029c1 	.word	0x080029c1
 8002924:	080029c1 	.word	0x080029c1
 8002928:	0800297b 	.word	0x0800297b
 800292c:	080029c1 	.word	0x080029c1
 8002930:	080029c1 	.word	0x080029c1
 8002934:	080029c1 	.word	0x080029c1
 8002938:	08002989 	.word	0x08002989
 800293c:	080029c1 	.word	0x080029c1
 8002940:	080029c1 	.word	0x080029c1
 8002944:	080029c1 	.word	0x080029c1
 8002948:	08002997 	.word	0x08002997
 800294c:	080029c1 	.word	0x080029c1
 8002950:	080029c1 	.word	0x080029c1
 8002954:	080029c1 	.word	0x080029c1
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029c1 	.word	0x080029c1
 8002960:	080029c1 	.word	0x080029c1
 8002964:	080029c1 	.word	0x080029c1
 8002968:	080029b3 	.word	0x080029b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fa70 	bl	8002e58 <TIM_OC1_SetConfig>
      break;
 8002978:	e025      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fb03 	bl	8002f8c <TIM_OC2_SetConfig>
      break;
 8002986:	e01e      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb94 	bl	80030bc <TIM_OC3_SetConfig>
      break;
 8002994:	e017      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fc23 	bl	80031e8 <TIM_OC4_SetConfig>
      break;
 80029a2:	e010      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fcb4 	bl	8003318 <TIM_OC5_SetConfig>
      break;
 80029b0:	e009      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fd17 	bl	80033ec <TIM_OC6_SetConfig>
      break;
 80029be:	e002      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
      break;
 80029c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0ff      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b14      	cmp	r3, #20
 8002a02:	f200 80f0 	bhi.w	8002be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a06:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	08002be7 	.word	0x08002be7
 8002a14:	08002be7 	.word	0x08002be7
 8002a18:	08002be7 	.word	0x08002be7
 8002a1c:	08002aa1 	.word	0x08002aa1
 8002a20:	08002be7 	.word	0x08002be7
 8002a24:	08002be7 	.word	0x08002be7
 8002a28:	08002be7 	.word	0x08002be7
 8002a2c:	08002ae3 	.word	0x08002ae3
 8002a30:	08002be7 	.word	0x08002be7
 8002a34:	08002be7 	.word	0x08002be7
 8002a38:	08002be7 	.word	0x08002be7
 8002a3c:	08002b23 	.word	0x08002b23
 8002a40:	08002be7 	.word	0x08002be7
 8002a44:	08002be7 	.word	0x08002be7
 8002a48:	08002be7 	.word	0x08002be7
 8002a4c:	08002b65 	.word	0x08002b65
 8002a50:	08002be7 	.word	0x08002be7
 8002a54:	08002be7 	.word	0x08002be7
 8002a58:	08002be7 	.word	0x08002be7
 8002a5c:	08002ba5 	.word	0x08002ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f9f6 	bl	8002e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e0a5      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa70 	bl	8002f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e084      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fae7 	bl	80030bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e064      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fb5d 	bl	80031e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e043      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fbd4 	bl	8003318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002ba2:	e023      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fc1e 	bl	80033ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002be4:	e002      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e031      	b.n	8002c7c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fc4a 	bl	80034c4 <TIM_SlaveTimer_SetConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e018      	b.n	8002c7c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c58:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c68:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a62      	ldr	r2, [pc, #392]	@ (8002e20 <TIM_Base_SetConfig+0x19c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02b      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a61      	ldr	r2, [pc, #388]	@ (8002e24 <TIM_Base_SetConfig+0x1a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002caa:	d023      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb2:	d01f      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <TIM_Base_SetConfig+0x1a4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01b      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8002e2c <TIM_Base_SetConfig+0x1a8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d017      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e30 <TIM_Base_SetConfig+0x1ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a59      	ldr	r2, [pc, #356]	@ (8002e34 <TIM_Base_SetConfig+0x1b0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00f      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a58      	ldr	r2, [pc, #352]	@ (8002e38 <TIM_Base_SetConfig+0x1b4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a57      	ldr	r2, [pc, #348]	@ (8002e3c <TIM_Base_SetConfig+0x1b8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a56      	ldr	r2, [pc, #344]	@ (8002e40 <TIM_Base_SetConfig+0x1bc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0x70>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a55      	ldr	r2, [pc, #340]	@ (8002e44 <TIM_Base_SetConfig+0x1c0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a45      	ldr	r2, [pc, #276]	@ (8002e20 <TIM_Base_SetConfig+0x19c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d03b      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a44      	ldr	r2, [pc, #272]	@ (8002e24 <TIM_Base_SetConfig+0x1a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d037      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1c:	d033      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d24:	d02f      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a3f      	ldr	r2, [pc, #252]	@ (8002e28 <TIM_Base_SetConfig+0x1a4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a3e      	ldr	r2, [pc, #248]	@ (8002e2c <TIM_Base_SetConfig+0x1a8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d027      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a3d      	ldr	r2, [pc, #244]	@ (8002e30 <TIM_Base_SetConfig+0x1ac>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d023      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a3c      	ldr	r2, [pc, #240]	@ (8002e34 <TIM_Base_SetConfig+0x1b0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a3b      	ldr	r2, [pc, #236]	@ (8002e38 <TIM_Base_SetConfig+0x1b4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01b      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a3a      	ldr	r2, [pc, #232]	@ (8002e3c <TIM_Base_SetConfig+0x1b8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d017      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a39      	ldr	r2, [pc, #228]	@ (8002e40 <TIM_Base_SetConfig+0x1bc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a38      	ldr	r2, [pc, #224]	@ (8002e44 <TIM_Base_SetConfig+0x1c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a37      	ldr	r2, [pc, #220]	@ (8002e48 <TIM_Base_SetConfig+0x1c4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a36      	ldr	r2, [pc, #216]	@ (8002e4c <TIM_Base_SetConfig+0x1c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a35      	ldr	r2, [pc, #212]	@ (8002e50 <TIM_Base_SetConfig+0x1cc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x102>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a34      	ldr	r2, [pc, #208]	@ (8002e54 <TIM_Base_SetConfig+0x1d0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <TIM_Base_SetConfig+0x19c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <TIM_Base_SetConfig+0x168>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a17      	ldr	r2, [pc, #92]	@ (8002e24 <TIM_Base_SetConfig+0x1a0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00f      	beq.n	8002dec <TIM_Base_SetConfig+0x168>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <TIM_Base_SetConfig+0x1bc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00b      	beq.n	8002dec <TIM_Base_SetConfig+0x168>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <TIM_Base_SetConfig+0x1c0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0x168>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <TIM_Base_SetConfig+0x1cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x168>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <TIM_Base_SetConfig+0x1d0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d103      	bne.n	8002df4 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
  }
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	50012c00 	.word	0x50012c00
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	50000400 	.word	0x50000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	50000800 	.word	0x50000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	50000c00 	.word	0x50000c00
 8002e40:	40013400 	.word	0x40013400
 8002e44:	50013400 	.word	0x50013400
 8002e48:	40001800 	.word	0x40001800
 8002e4c:	50001800 	.word	0x50001800
 8002e50:	40014000 	.word	0x40014000
 8002e54:	50014000 	.word	0x50014000

08002e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0201 	bic.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	@ (8002f74 <TIM_OC1_SetConfig+0x11c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2f      	ldr	r2, [pc, #188]	@ (8002f78 <TIM_OC1_SetConfig+0x120>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f7c <TIM_OC1_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a2d      	ldr	r2, [pc, #180]	@ (8002f80 <TIM_OC1_SetConfig+0x128>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <TIM_OC1_SetConfig+0x12c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x88>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <TIM_OC1_SetConfig+0x130>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10c      	bne.n	8002efa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f023 0308 	bic.w	r3, r3, #8
 8002ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f74 <TIM_OC1_SetConfig+0x11c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <TIM_OC1_SetConfig+0x120>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f7c <TIM_OC1_SetConfig+0x124>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	@ (8002f80 <TIM_OC1_SetConfig+0x128>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	@ (8002f84 <TIM_OC1_SetConfig+0x12c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_OC1_SetConfig+0xd2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a18      	ldr	r2, [pc, #96]	@ (8002f88 <TIM_OC1_SetConfig+0x130>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d111      	bne.n	8002f4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	50012c00 	.word	0x50012c00
 8002f7c:	40013400 	.word	0x40013400
 8002f80:	50013400 	.word	0x50013400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	50014000 	.word	0x50014000

08002f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f023 0210 	bic.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0320 	bic.w	r3, r3, #32
 8002fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <TIM_OC2_SetConfig+0x118>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00b      	beq.n	8003008 <TIM_OC2_SetConfig+0x7c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <TIM_OC2_SetConfig+0x11c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_OC2_SetConfig+0x7c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <TIM_OC2_SetConfig+0x120>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC2_SetConfig+0x7c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <TIM_OC2_SetConfig+0x124>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10d      	bne.n	8003024 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800300e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <TIM_OC2_SetConfig+0x118>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <TIM_OC2_SetConfig+0xc8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <TIM_OC2_SetConfig+0x11c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00f      	beq.n	8003054 <TIM_OC2_SetConfig+0xc8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <TIM_OC2_SetConfig+0x120>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <TIM_OC2_SetConfig+0xc8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <TIM_OC2_SetConfig+0x124>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_OC2_SetConfig+0xc8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <TIM_OC2_SetConfig+0x128>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC2_SetConfig+0xc8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a1a      	ldr	r2, [pc, #104]	@ (80030b8 <TIM_OC2_SetConfig+0x12c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d113      	bne.n	800307c <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800305a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	50012c00 	.word	0x50012c00
 80030ac:	40013400 	.word	0x40013400
 80030b0:	50013400 	.word	0x50013400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	50014000 	.word	0x50014000

080030bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <TIM_OC3_SetConfig+0x114>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_OC3_SetConfig+0x7a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <TIM_OC3_SetConfig+0x118>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_OC3_SetConfig+0x7a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2b      	ldr	r2, [pc, #172]	@ (80031d8 <TIM_OC3_SetConfig+0x11c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC3_SetConfig+0x7a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <TIM_OC3_SetConfig+0x120>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10d      	bne.n	8003152 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800313c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <TIM_OC3_SetConfig+0x114>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_OC3_SetConfig+0xc6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <TIM_OC3_SetConfig+0x118>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_OC3_SetConfig+0xc6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <TIM_OC3_SetConfig+0x11c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_OC3_SetConfig+0xc6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1b      	ldr	r2, [pc, #108]	@ (80031dc <TIM_OC3_SetConfig+0x120>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_OC3_SetConfig+0xc6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1a      	ldr	r2, [pc, #104]	@ (80031e0 <TIM_OC3_SetConfig+0x124>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_OC3_SetConfig+0xc6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <TIM_OC3_SetConfig+0x128>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	621a      	str	r2, [r3, #32]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	50012c00 	.word	0x50012c00
 80031d8:	40013400 	.word	0x40013400
 80031dc:	50013400 	.word	0x50013400
 80031e0:	40014000 	.word	0x40014000
 80031e4:	50014000 	.word	0x50014000

080031e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800321a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	031b      	lsls	r3, r3, #12
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a2e      	ldr	r2, [pc, #184]	@ (8003300 <TIM_OC4_SetConfig+0x118>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_OC4_SetConfig+0x7c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a2d      	ldr	r2, [pc, #180]	@ (8003304 <TIM_OC4_SetConfig+0x11c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_OC4_SetConfig+0x7c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a2c      	ldr	r2, [pc, #176]	@ (8003308 <TIM_OC4_SetConfig+0x120>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_OC4_SetConfig+0x7c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a2b      	ldr	r2, [pc, #172]	@ (800330c <TIM_OC4_SetConfig+0x124>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10d      	bne.n	8003280 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800326a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	031b      	lsls	r3, r3, #12
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800327e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1f      	ldr	r2, [pc, #124]	@ (8003300 <TIM_OC4_SetConfig+0x118>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <TIM_OC4_SetConfig+0xc8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1e      	ldr	r2, [pc, #120]	@ (8003304 <TIM_OC4_SetConfig+0x11c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00f      	beq.n	80032b0 <TIM_OC4_SetConfig+0xc8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <TIM_OC4_SetConfig+0x120>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_OC4_SetConfig+0xc8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <TIM_OC4_SetConfig+0x124>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_OC4_SetConfig+0xc8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <TIM_OC4_SetConfig+0x128>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_OC4_SetConfig+0xc8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003314 <TIM_OC4_SetConfig+0x12c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d113      	bne.n	80032d8 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	50012c00 	.word	0x50012c00
 8003308:	40013400 	.word	0x40013400
 800330c:	50013400 	.word	0x50013400
 8003310:	40014000 	.word	0x40014000
 8003314:	50014000 	.word	0x50014000

08003318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800335c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <TIM_OC5_SetConfig+0xbc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_OC5_SetConfig+0x82>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <TIM_OC5_SetConfig+0xc0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_OC5_SetConfig+0x82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <TIM_OC5_SetConfig+0xc4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_OC5_SetConfig+0x82>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a16      	ldr	r2, [pc, #88]	@ (80033e0 <TIM_OC5_SetConfig+0xc8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_OC5_SetConfig+0x82>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <TIM_OC5_SetConfig+0xcc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_OC5_SetConfig+0x82>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a14      	ldr	r2, [pc, #80]	@ (80033e8 <TIM_OC5_SetConfig+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d109      	bne.n	80033ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	50012c00 	.word	0x50012c00
 80033dc:	40013400 	.word	0x40013400
 80033e0:	50013400 	.word	0x50013400
 80033e4:	40014000 	.word	0x40014000
 80033e8:	50014000 	.word	0x50014000

080033ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800341a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	051b      	lsls	r3, r3, #20
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <TIM_OC6_SetConfig+0xc0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <TIM_OC6_SetConfig+0x84>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <TIM_OC6_SetConfig+0xc4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00f      	beq.n	8003470 <TIM_OC6_SetConfig+0x84>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a18      	ldr	r2, [pc, #96]	@ (80034b4 <TIM_OC6_SetConfig+0xc8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00b      	beq.n	8003470 <TIM_OC6_SetConfig+0x84>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <TIM_OC6_SetConfig+0xcc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <TIM_OC6_SetConfig+0x84>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a16      	ldr	r2, [pc, #88]	@ (80034bc <TIM_OC6_SetConfig+0xd0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_OC6_SetConfig+0x84>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a15      	ldr	r2, [pc, #84]	@ (80034c0 <TIM_OC6_SetConfig+0xd4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d109      	bne.n	8003484 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	029b      	lsls	r3, r3, #10
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	50012c00 	.word	0x50012c00
 80034b4:	40013400 	.word	0x40013400
 80034b8:	50013400 	.word	0x50013400
 80034bc:	40014000 	.word	0x40014000
 80034c0:	50014000 	.word	0x50014000

080034c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80034e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f6:	f023 0307 	bic.w	r3, r3, #7
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003516:	f000 80aa 	beq.w	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800351a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800351e:	f200 80a3 	bhi.w	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003522:	4a56      	ldr	r2, [pc, #344]	@ (800367c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	f000 80a2 	beq.w	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800352a:	4a54      	ldr	r2, [pc, #336]	@ (800367c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f200 809b 	bhi.w	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003532:	4a53      	ldr	r2, [pc, #332]	@ (8003680 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	f000 809a 	beq.w	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800353a:	4a51      	ldr	r2, [pc, #324]	@ (8003680 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	f200 8093 	bhi.w	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003542:	4a50      	ldr	r2, [pc, #320]	@ (8003684 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f000 8092 	beq.w	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800354a:	4a4e      	ldr	r2, [pc, #312]	@ (8003684 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f200 808b 	bhi.w	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003552:	4a4d      	ldr	r2, [pc, #308]	@ (8003688 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	f000 808a 	beq.w	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800355a:	4a4b      	ldr	r2, [pc, #300]	@ (8003688 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	f200 8083 	bhi.w	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003562:	4a4a      	ldr	r2, [pc, #296]	@ (800368c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	f000 8082 	beq.w	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800356a:	4a48      	ldr	r2, [pc, #288]	@ (800368c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d87b      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003570:	4a47      	ldr	r2, [pc, #284]	@ (8003690 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d07b      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 8003576:	4a46      	ldr	r2, [pc, #280]	@ (8003690 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d875      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 800357c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003580:	d075      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 8003582:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003586:	d86f      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800358c:	d06f      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003592:	d869      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003594:	2b70      	cmp	r3, #112	@ 0x70
 8003596:	d01a      	beq.n	80035ce <TIM_SlaveTimer_SetConfig+0x10a>
 8003598:	2b70      	cmp	r3, #112	@ 0x70
 800359a:	d865      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 800359c:	2b60      	cmp	r3, #96	@ 0x60
 800359e:	d059      	beq.n	8003654 <TIM_SlaveTimer_SetConfig+0x190>
 80035a0:	2b60      	cmp	r3, #96	@ 0x60
 80035a2:	d861      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035a4:	2b50      	cmp	r3, #80	@ 0x50
 80035a6:	d04b      	beq.n	8003640 <TIM_SlaveTimer_SetConfig+0x17c>
 80035a8:	2b50      	cmp	r3, #80	@ 0x50
 80035aa:	d85d      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035ac:	2b40      	cmp	r3, #64	@ 0x40
 80035ae:	d019      	beq.n	80035e4 <TIM_SlaveTimer_SetConfig+0x120>
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	d859      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035b4:	2b30      	cmp	r3, #48	@ 0x30
 80035b6:	d05a      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 80035b8:	2b30      	cmp	r3, #48	@ 0x30
 80035ba:	d855      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d056      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d851      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d052      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d050      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x1aa>
 80035cc:	e04c      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80035de:	f000 f8b8 	bl	8003752 <TIM_ETR_SetConfig>
      break;
 80035e2:	e045      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x1ac>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d004      	beq.n	80035f6 <TIM_SlaveTimer_SetConfig+0x132>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80035f0:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80035f4:	d101      	bne.n	80035fa <TIM_SlaveTimer_SetConfig+0x136>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e03b      	b.n	8003672 <TIM_SlaveTimer_SetConfig+0x1ae>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003620:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
      break;
 800363e:	e017      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364c:	461a      	mov	r2, r3
 800364e:	f000 f821 	bl	8003694 <TIM_TI1_ConfigInputStage>
      break;
 8003652:	e00d      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003660:	461a      	mov	r2, r3
 8003662:	f000 f846 	bl	80036f2 <TIM_TI2_ConfigInputStage>
      break;
 8003666:	e003      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	75fb      	strb	r3, [r7, #23]
      break;
 800366c:	e000      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x1ac>
      break;
 800366e:	bf00      	nop
  }

  return status;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	00100070 	.word	0x00100070
 8003680:	00100060 	.word	0x00100060
 8003684:	00100050 	.word	0x00100050
 8003688:	00100040 	.word	0x00100040
 800368c:	00100030 	.word	0x00100030
 8003690:	00100020 	.word	0x00100020

08003694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f023 030a 	bic.w	r3, r3, #10
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b087      	sub	sp, #28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 0210 	bic.w	r2, r3, #16
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800371c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	031b      	lsls	r3, r3, #12
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800372e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800376c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	2201      	movs	r2, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	401a      	ands	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	431a      	orrs	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_TIMEx_PWMN_Start+0x24>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e022      	b.n	8003846 <HAL_TIMEx_PWMN_Start+0x6a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d109      	bne.n	800381a <HAL_TIMEx_PWMN_Start+0x3e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e015      	b.n	8003846 <HAL_TIMEx_PWMN_Start+0x6a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d109      	bne.n	8003834 <HAL_TIMEx_PWMN_Start+0x58>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e008      	b.n	8003846 <HAL_TIMEx_PWMN_Start+0x6a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e09b      	b.n	8003986 <HAL_TIMEx_PWMN_Start+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_TIMEx_PWMN_Start+0x82>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800385c:	e013      	b.n	8003886 <HAL_TIMEx_PWMN_Start+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d104      	bne.n	800386e <HAL_TIMEx_PWMN_Start+0x92>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800386c:	e00b      	b.n	8003886 <HAL_TIMEx_PWMN_Start+0xaa>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d104      	bne.n	800387e <HAL_TIMEx_PWMN_Start+0xa2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800387c:	e003      	b.n	8003886 <HAL_TIMEx_PWMN_Start+0xaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2204      	movs	r2, #4
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa19 	bl	8003cc6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a39      	ldr	r2, [pc, #228]	@ (8003990 <HAL_TIMEx_PWMN_Start+0x1b4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d04a      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a38      	ldr	r2, [pc, #224]	@ (8003994 <HAL_TIMEx_PWMN_Start+0x1b8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d045      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d040      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ca:	d03b      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a31      	ldr	r2, [pc, #196]	@ (8003998 <HAL_TIMEx_PWMN_Start+0x1bc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d036      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_TIMEx_PWMN_Start+0x1c0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d031      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2e      	ldr	r2, [pc, #184]	@ (80039a0 <HAL_TIMEx_PWMN_Start+0x1c4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02c      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2d      	ldr	r2, [pc, #180]	@ (80039a4 <HAL_TIMEx_PWMN_Start+0x1c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d027      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2b      	ldr	r2, [pc, #172]	@ (80039a8 <HAL_TIMEx_PWMN_Start+0x1cc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d022      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2a      	ldr	r2, [pc, #168]	@ (80039ac <HAL_TIMEx_PWMN_Start+0x1d0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d01d      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a28      	ldr	r2, [pc, #160]	@ (80039b0 <HAL_TIMEx_PWMN_Start+0x1d4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d018      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a27      	ldr	r2, [pc, #156]	@ (80039b4 <HAL_TIMEx_PWMN_Start+0x1d8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d013      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a25      	ldr	r2, [pc, #148]	@ (80039b8 <HAL_TIMEx_PWMN_Start+0x1dc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00e      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <HAL_TIMEx_PWMN_Start+0x1e0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <HAL_TIMEx_PWMN_Start+0x1e4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0x168>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a21      	ldr	r2, [pc, #132]	@ (80039c4 <HAL_TIMEx_PWMN_Start+0x1e8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d115      	bne.n	8003970 <HAL_TIMEx_PWMN_Start+0x194>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <HAL_TIMEx_PWMN_Start+0x1ec>)
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d015      	beq.n	8003982 <HAL_TIMEx_PWMN_Start+0x1a6>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800395c:	d011      	beq.n	8003982 <HAL_TIMEx_PWMN_Start+0x1a6>
    {
      __HAL_TIM_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	e008      	b.n	8003982 <HAL_TIMEx_PWMN_Start+0x1a6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e000      	b.n	8003984 <HAL_TIMEx_PWMN_Start+0x1a8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00
 8003994:	50012c00 	.word	0x50012c00
 8003998:	40000400 	.word	0x40000400
 800399c:	50000400 	.word	0x50000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	50000800 	.word	0x50000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	50000c00 	.word	0x50000c00
 80039b0:	40013400 	.word	0x40013400
 80039b4:	50013400 	.word	0x50013400
 80039b8:	40001800 	.word	0x40001800
 80039bc:	50001800 	.word	0x50001800
 80039c0:	40014000 	.word	0x40014000
 80039c4:	50014000 	.word	0x50014000
 80039c8:	00010007 	.word	0x00010007

080039cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0a1      	b.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a4a      	ldr	r2, [pc, #296]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a49      	ldr	r2, [pc, #292]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a47      	ldr	r2, [pc, #284]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a46      	ldr	r2, [pc, #280]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d108      	bne.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a34      	ldr	r2, [pc, #208]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04a      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d045      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a78:	d040      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a82:	d03b      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2e      	ldr	r2, [pc, #184]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d036      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d031      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02c      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d027      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a27      	ldr	r2, [pc, #156]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01d      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1c      	ldr	r2, [pc, #112]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10c      	bne.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	50012c00 	.word	0x50012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	50013400 	.word	0x50013400
 8003b44:	40000400 	.word	0x40000400
 8003b48:	50000400 	.word	0x50000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	50000800 	.word	0x50000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	50000c00 	.word	0x50000c00
 8003b5c:	40001800 	.word	0x40001800
 8003b60:	50001800 	.word	0x50001800
 8003b64:	40014000 	.word	0x40014000
 8003b68:	50014000 	.word	0x50014000

08003b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e07d      	b.n	8003c84 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1b      	ldr	r2, [pc, #108]	@ (8003c98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d11c      	bne.n	8003c72 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	051b      	lsls	r3, r3, #20
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	50012c00 	.word	0x50012c00
 8003c98:	40013400 	.word	0x40013400
 8003c9c:	50013400 	.word	0x50013400

08003ca0 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	2204      	movs	r2, #4
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	401a      	ands	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <memset>:
 8003d10:	4402      	add	r2, r0
 8003d12:	4603      	mov	r3, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	4d0d      	ldr	r5, [pc, #52]	@ (8003d58 <__libc_init_array+0x38>)
 8003d24:	2600      	movs	r6, #0
 8003d26:	4c0d      	ldr	r4, [pc, #52]	@ (8003d5c <__libc_init_array+0x3c>)
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	42a6      	cmp	r6, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	4d0b      	ldr	r5, [pc, #44]	@ (8003d60 <__libc_init_array+0x40>)
 8003d32:	2600      	movs	r6, #0
 8003d34:	4c0b      	ldr	r4, [pc, #44]	@ (8003d64 <__libc_init_array+0x44>)
 8003d36:	f000 f817 	bl	8003d68 <_init>
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	42a6      	cmp	r6, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d48:	3601      	adds	r6, #1
 8003d4a:	4798      	blx	r3
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d52:	3601      	adds	r6, #1
 8003d54:	4798      	blx	r3
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	08003d90 	.word	0x08003d90
 8003d5c:	08003d90 	.word	0x08003d90
 8003d60:	08003d90 	.word	0x08003d90
 8003d64:	08003d94 	.word	0x08003d94

08003d68 <_init>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr

08003d74 <_fini>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr
