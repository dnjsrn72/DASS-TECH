
H523RC_3Pahse_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d64  08003d64  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d64  08003d64  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d64  08003d64  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d64  08003d64  00004d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d68  08003d68  00004d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003d78  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003d78  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2c0  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164a  00000000  00000000  00011302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00012950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000910  00000000  00000000  00013510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291fa  00000000  00000000  00013e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc35  00000000  00000000  0003d01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d9bb  00000000  00000000  00049c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015760a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  00157650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0015a86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08003d3c 	.word	0x08003d3c

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08003d3c 	.word	0x08003d3c

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fcdc 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f830 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 fac2 	bl	8000828 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002a4:	f000 f89e 	bl	80003e4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80002a8:	f000 f94a 	bl	8000540 <MX_TIM8_Init>
  MX_TIM15_Init();
 80002ac:	f000 fa14 	bl	80006d8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002b0:	2100      	movs	r1, #0
 80002b2:	4810      	ldr	r0, [pc, #64]	@ (80002f4 <main+0x60>)
 80002b4:	f002 f9ce 	bl	8002654 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start (&htim1, TIM_CHANNEL_1);
 80002b8:	2100      	movs	r1, #0
 80002ba:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <main+0x60>)
 80002bc:	f003 fa8a 	bl	80037d4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 80002c0:	2104      	movs	r1, #4
 80002c2:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <main+0x60>)
 80002c4:	f002 f82a 	bl	800231c <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <main+0x64>)
 80002cc:	f002 f9c2 	bl	8002654 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start (&htim8, TIM_CHANNEL_1);
 80002d0:	2100      	movs	r1, #0
 80002d2:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <main+0x64>)
 80002d4:	f003 fa7e 	bl	80037d4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_2);
 80002d8:	2104      	movs	r1, #4
 80002da:	4807      	ldr	r0, [pc, #28]	@ (80002f8 <main+0x64>)
 80002dc:	f002 f81e 	bl	800231c <HAL_TIM_OC_Start>

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80002e0:	2100      	movs	r1, #0
 80002e2:	4806      	ldr	r0, [pc, #24]	@ (80002fc <main+0x68>)
 80002e4:	f002 f9b6 	bl	8002654 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start (&htim15, TIM_CHANNEL_1);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4804      	ldr	r0, [pc, #16]	@ (80002fc <main+0x68>)
 80002ec:	f003 fa72 	bl	80037d4 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x5c>
 80002f4:	20000028 	.word	0x20000028
 80002f8:	20000074 	.word	0x20000074
 80002fc:	200000c0 	.word	0x200000c0

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b09c      	sub	sp, #112	@ 0x70
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0320 	add.w	r3, r7, #32
 800030a:	2250      	movs	r2, #80	@ 0x50
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fce7 	bl	8003ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
 8000324:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemClock_Config+0xdc>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	4a2c      	ldr	r2, [pc, #176]	@ (80003dc <SystemClock_Config+0xdc>)
 800032c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000330:	6113      	str	r3, [r2, #16]
 8000332:	4b2a      	ldr	r3, [pc, #168]	@ (80003dc <SystemClock_Config+0xdc>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800033e:	bf00      	nop
 8000340:	4b26      	ldr	r3, [pc, #152]	@ (80003dc <SystemClock_Config+0xdc>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	2b08      	cmp	r3, #8
 800034a:	d1f9      	bne.n	8000340 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800034c:	2310      	movs	r3, #16
 800034e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000356:	2320      	movs	r3, #32
 8000358:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800035e:	2302      	movs	r3, #2
 8000360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000366:	237d      	movs	r3, #125	@ 0x7d
 8000368:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800036a:	2302      	movs	r3, #2
 800036c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800036e:	2302      	movs	r3, #2
 8000370:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000372:	2302      	movs	r3, #2
 8000374:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000376:	2308      	movs	r3, #8
 8000378:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800037a:	2300      	movs	r3, #0
 800037c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0320 	add.w	r3, r7, #32
 8000386:	4618      	mov	r0, r3
 8000388:	f000 ffd8 	bl	800133c <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000392:	f000 fa73 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	231f      	movs	r3, #31
 8000398:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2303      	movs	r3, #3
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2105      	movs	r1, #5
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fbf9 	bl	8001bac <HAL_RCC_ClockConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003c0:	f000 fa5c 	bl	800087c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <SystemClock_Config+0xe0>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <SystemClock_Config+0xe0>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	3770      	adds	r7, #112	@ 0x70
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	44020800 	.word	0x44020800
 80003e0:	40022000 	.word	0x40022000

080003e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b098      	sub	sp, #96	@ 0x60
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2234      	movs	r2, #52	@ 0x34
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f003 fc66 	bl	8003ce2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000416:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000418:	4a48      	ldr	r2, [pc, #288]	@ (800053c <MX_TIM1_Init+0x158>)
 800041a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 250-1;
 800041c:	4b46      	ldr	r3, [pc, #280]	@ (8000538 <MX_TIM1_Init+0x154>)
 800041e:	22f9      	movs	r2, #249	@ 0xf9
 8000420:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000422:	4b45      	ldr	r3, [pc, #276]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000428:	4b43      	ldr	r3, [pc, #268]	@ (8000538 <MX_TIM1_Init+0x154>)
 800042a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800042e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	4b41      	ldr	r3, [pc, #260]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000436:	4b40      	ldr	r3, [pc, #256]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043c:	4b3e      	ldr	r3, [pc, #248]	@ (8000538 <MX_TIM1_Init+0x154>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000442:	483d      	ldr	r0, [pc, #244]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000444:	f002 f8ae 	bl	80025a4 <HAL_TIM_PWM_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800044e:	f000 fa15 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000452:	4839      	ldr	r0, [pc, #228]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000454:	f001 ff01 	bl	800225a <HAL_TIM_OC_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800045e:	f000 fa0d 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000462:	2350      	movs	r3, #80	@ 0x50
 8000464:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000466:	2300      	movs	r3, #0
 8000468:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800046e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000472:	4619      	mov	r1, r3
 8000474:	4830      	ldr	r0, [pc, #192]	@ (8000538 <MX_TIM1_Init+0x154>)
 8000476:	f003 faa5 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000480:	f000 f9fc 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000484:	2360      	movs	r3, #96	@ 0x60
 8000486:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000488:	f241 3388 	movw	r3, #5000	@ 0x1388
 800048c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048e:	2300      	movs	r3, #0
 8000490:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000492:	2300      	movs	r3, #0
 8000494:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4823      	ldr	r0, [pc, #140]	@ (8000538 <MX_TIM1_Init+0x154>)
 80004ac:	f002 fa90 	bl	80029d0 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80004b6:	f000 f9e1 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80004ba:	2310      	movs	r3, #16
 80004bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3333;
 80004be:	f640 5305 	movw	r3, #3333	@ 0xd05
 80004c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004c8:	2204      	movs	r2, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	481a      	ldr	r0, [pc, #104]	@ (8000538 <MX_TIM1_Init+0x154>)
 80004ce:	f002 fa05 	bl	80028dc <HAL_TIM_OC_ConfigChannel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004d8:	f000 f9d0 	bl	800087c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 80004e8:	23c8      	movs	r3, #200	@ 0xc8
 80004ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	4807      	ldr	r0, [pc, #28]	@ (8000538 <MX_TIM1_Init+0x154>)
 800051a:	f003 fb23 	bl	8003b64 <HAL_TIMEx_ConfigBreakDeadTime>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000524:	f000 f9aa 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000528:	4803      	ldr	r0, [pc, #12]	@ (8000538 <MX_TIM1_Init+0x154>)
 800052a:	f000 fa11 	bl	8000950 <HAL_TIM_MspPostInit>

}
 800052e:	bf00      	nop
 8000530:	3760      	adds	r7, #96	@ 0x60
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b09c      	sub	sp, #112	@ 0x70
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000546:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2234      	movs	r2, #52	@ 0x34
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fbb0 	bl	8003ce2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000582:	4b53      	ldr	r3, [pc, #332]	@ (80006d0 <MX_TIM8_Init+0x190>)
 8000584:	4a53      	ldr	r2, [pc, #332]	@ (80006d4 <MX_TIM8_Init+0x194>)
 8000586:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 250-1;
 8000588:	4b51      	ldr	r3, [pc, #324]	@ (80006d0 <MX_TIM8_Init+0x190>)
 800058a:	22f9      	movs	r2, #249	@ 0xf9
 800058c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058e:	4b50      	ldr	r3, [pc, #320]	@ (80006d0 <MX_TIM8_Init+0x190>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8000594:	4b4e      	ldr	r3, [pc, #312]	@ (80006d0 <MX_TIM8_Init+0x190>)
 8000596:	f242 720f 	movw	r2, #9999	@ 0x270f
 800059a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059c:	4b4c      	ldr	r3, [pc, #304]	@ (80006d0 <MX_TIM8_Init+0x190>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80005a2:	4b4b      	ldr	r3, [pc, #300]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a8:	4b49      	ldr	r3, [pc, #292]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80005ae:	4848      	ldr	r0, [pc, #288]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80005b0:	f001 fdfc 	bl	80021ac <HAL_TIM_Base_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80005ba:	f000 f95f 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80005be:	4844      	ldr	r0, [pc, #272]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80005c0:	f001 fff0 	bl	80025a4 <HAL_TIM_PWM_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80005ca:	f000 f957 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80005ce:	4840      	ldr	r0, [pc, #256]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80005d0:	f001 fe43 	bl	800225a <HAL_TIM_OC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80005da:	f000 f94f 	bl	800087c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005de:	2306      	movs	r3, #6
 80005e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80005e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005ea:	4619      	mov	r1, r3
 80005ec:	4838      	ldr	r0, [pc, #224]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80005ee:	f002 fb03 	bl	8002bf8 <HAL_TIM_SlaveConfigSynchro>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80005f8:	f000 f940 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80005fc:	2350      	movs	r3, #80	@ 0x50
 80005fe:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000600:	2300      	movs	r3, #0
 8000602:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000608:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800060c:	4619      	mov	r1, r3
 800060e:	4830      	ldr	r0, [pc, #192]	@ (80006d0 <MX_TIM8_Init+0x190>)
 8000610:	f003 f9d8 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800061a:	f000 f92f 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061e:	2360      	movs	r3, #96	@ 0x60
 8000620:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 5000;
 8000622:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800062c:	2300      	movs	r3, #0
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800063c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	4822      	ldr	r0, [pc, #136]	@ (80006d0 <MX_TIM8_Init+0x190>)
 8000646:	f002 f9c3 	bl	80029d0 <HAL_TIM_PWM_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8000650:	f000 f914 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000654:	2310      	movs	r3, #16
 8000656:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3333;
 8000658:	f640 5305 	movw	r3, #3333	@ 0xd05
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000662:	2204      	movs	r2, #4
 8000664:	4619      	mov	r1, r3
 8000666:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <MX_TIM8_Init+0x190>)
 8000668:	f002 f938 	bl	80028dc <HAL_TIM_OC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 8000672:	f000 f903 	bl	800087c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000682:	23c8      	movs	r3, #200	@ 0xc8
 8000684:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800069c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80006b4:	f003 fa56 	bl	8003b64 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM8_Init+0x182>
  {
    Error_Handler();
 80006be:	f000 f8dd 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <MX_TIM8_Init+0x190>)
 80006c4:	f000 f944 	bl	8000950 <HAL_TIM_MspPostInit>

}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	@ 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000074 	.word	0x20000074
 80006d4:	40013400 	.word	0x40013400

080006d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09c      	sub	sp, #112	@ 0x70
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2234      	movs	r2, #52	@ 0x34
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fae4 	bl	8003ce2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800071a:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <MX_TIM15_Init+0x148>)
 800071c:	4a41      	ldr	r2, [pc, #260]	@ (8000824 <MX_TIM15_Init+0x14c>)
 800071e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 250-1;
 8000720:	4b3f      	ldr	r3, [pc, #252]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000722:	22f9      	movs	r2, #249	@ 0xf9
 8000724:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 800072c:	4b3c      	ldr	r3, [pc, #240]	@ (8000820 <MX_TIM15_Init+0x148>)
 800072e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000732:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800073a:	4b39      	ldr	r3, [pc, #228]	@ (8000820 <MX_TIM15_Init+0x148>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b37      	ldr	r3, [pc, #220]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000746:	4836      	ldr	r0, [pc, #216]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000748:	f001 fd30 	bl	80021ac <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000752:	f000 f893 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000756:	4832      	ldr	r0, [pc, #200]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000758:	f001 ff24 	bl	80025a4 <HAL_TIM_PWM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000762:	f000 f88b 	bl	800087c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000766:	2306      	movs	r3, #6
 8000768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 800076a:	f04f 1310 	mov.w	r3, #1048592	@ 0x100010
 800076e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000770:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000774:	4619      	mov	r1, r3
 8000776:	482a      	ldr	r0, [pc, #168]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000778:	f002 fa3e 	bl	8002bf8 <HAL_TIM_SlaveConfigSynchro>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM15_Init+0xae>
  {
    Error_Handler();
 8000782:	f000 f87b 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800078e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000792:	4619      	mov	r1, r3
 8000794:	4822      	ldr	r0, [pc, #136]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000796:	f003 f915 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM15_Init+0xcc>
  {
    Error_Handler();
 80007a0:	f000 f86c 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a4:	2360      	movs	r3, #96	@ 0x60
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 5000;
 80007a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4815      	ldr	r0, [pc, #84]	@ (8000820 <MX_TIM15_Init+0x148>)
 80007cc:	f002 f900 	bl	80029d0 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM15_Init+0x102>
  {
    Error_Handler();
 80007d6:	f000 f851 	bl	800087c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 200;
 80007e6:	23c8      	movs	r3, #200	@ 0xc8
 80007e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000802:	f003 f9af 	bl	8003b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM15_Init+0x138>
  {
    Error_Handler();
 800080c:	f000 f836 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000810:	4803      	ldr	r0, [pc, #12]	@ (8000820 <MX_TIM15_Init+0x148>)
 8000812:	f000 f89d 	bl	8000950 <HAL_TIM_MspPostInit>

}
 8000816:	bf00      	nop
 8000818:	3770      	adds	r7, #112	@ 0x70
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000c0 	.word	0x200000c0
 8000824:	40014000 	.word	0x40014000

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_GPIO_Init+0x50>)
 8000830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <MX_GPIO_Init+0x50>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_GPIO_Init+0x50>)
 8000840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_GPIO_Init+0x50>)
 800084e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <MX_GPIO_Init+0x50>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_GPIO_Init+0x50>)
 800085e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	44020c00 	.word	0x44020c00

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0b      	ldr	r2, [pc, #44]	@ (80008d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10e      	bne.n	80008c8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <HAL_TIM_PWM_MspInit+0x40>)
 80008ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008b0:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <HAL_TIM_PWM_MspInit+0x40>)
 80008b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <HAL_TIM_PWM_MspInit+0x40>)
 80008bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	44020c00 	.word	0x44020c00

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <HAL_TIM_Base_MspInit+0x68>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10f      	bne.n	800090e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80008ee:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <HAL_TIM_Base_MspInit+0x6c>)
 80008f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008f4:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <HAL_TIM_Base_MspInit+0x6c>)
 80008f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_TIM_Base_MspInit+0x6c>)
 8000900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800090c:	e013      	b.n	8000936 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <HAL_TIM_Base_MspInit+0x70>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d10e      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <HAL_TIM_Base_MspInit+0x6c>)
 800091a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <HAL_TIM_Base_MspInit+0x6c>)
 8000920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000924:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <HAL_TIM_Base_MspInit+0x6c>)
 800092a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800092e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40013400 	.word	0x40013400
 8000948:	44020c00 	.word	0x44020c00
 800094c:	40014000 	.word	0x40014000

08000950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a48      	ldr	r2, [pc, #288]	@ (8000a90 <HAL_TIM_MspPostInit+0x140>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d120      	bne.n	80009b4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b48      	ldr	r3, [pc, #288]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000978:	4a46      	ldr	r2, [pc, #280]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000982:	4b44      	ldr	r3, [pc, #272]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000990:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	483a      	ldr	r0, [pc, #232]	@ (8000a98 <HAL_TIM_MspPostInit+0x148>)
 80009ae:	f000 fb73 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80009b2:	e068      	b.n	8000a86 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM8)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a38      	ldr	r2, [pc, #224]	@ (8000a9c <HAL_TIM_MspPostInit+0x14c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d13f      	bne.n	8000a3e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b35      	ldr	r3, [pc, #212]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 80009c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c4:	4a33      	ldr	r2, [pc, #204]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 80009d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 80009de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 80009ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009fa:	2320      	movs	r3, #32
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4820      	ldr	r0, [pc, #128]	@ (8000a98 <HAL_TIM_MspPostInit+0x148>)
 8000a16:	f000 fb3f 	bl	8001098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481a      	ldr	r0, [pc, #104]	@ (8000aa0 <HAL_TIM_MspPostInit+0x150>)
 8000a38:	f000 fb2e 	bl	8001098 <HAL_GPIO_Init>
}
 8000a3c:	e023      	b.n	8000a86 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM15)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <HAL_TIM_MspPostInit+0x154>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d11e      	bne.n	8000a86 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4e:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_TIM_MspPostInit+0x144>)
 8000a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a66:	2306      	movs	r3, #6
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8000a76:	2304      	movs	r3, #4
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <HAL_TIM_MspPostInit+0x148>)
 8000a82:	f000 fb09 	bl	8001098 <HAL_GPIO_Init>
}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	@ 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012c00 	.word	0x40012c00
 8000a94:	44020c00 	.word	0x44020c00
 8000a98:	42020000 	.word	0x42020000
 8000a9c:	40013400 	.word	0x40013400
 8000aa0:	42020400 	.word	0x42020400
 8000aa4:	40014000 	.word	0x40014000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f947 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0e:	4b35      	ldr	r3, [pc, #212]	@ (8000be4 <SystemInit+0xdc>)
 8000b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b14:	4a33      	ldr	r2, [pc, #204]	@ (8000be4 <SystemInit+0xdc>)
 8000b16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000b1e:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <SystemInit+0xe0>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <SystemInit+0xe0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000be8 <SystemInit+0xe0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <SystemInit+0xe0>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	492c      	ldr	r1, [pc, #176]	@ (8000be8 <SystemInit+0xe0>)
 8000b36:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <SystemInit+0xe4>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <SystemInit+0xe0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000b42:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <SystemInit+0xe0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <SystemInit+0xe0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000b4e:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <SystemInit+0xe0>)
 8000b50:	4a27      	ldr	r2, [pc, #156]	@ (8000bf0 <SystemInit+0xe8>)
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <SystemInit+0xe0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000b5a:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <SystemInit+0xe0>)
 8000b5c:	4a24      	ldr	r2, [pc, #144]	@ (8000bf0 <SystemInit+0xe8>)
 8000b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <SystemInit+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <SystemInit+0xe0>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <SystemInit+0xe8>)
 8000b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <SystemInit+0xe0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b72:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <SystemInit+0xe0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1c      	ldr	r2, [pc, #112]	@ (8000be8 <SystemInit+0xe0>)
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <SystemInit+0xe0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <SystemInit+0xdc>)
 8000b86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b8a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <SystemInit+0xec>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b94:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000b9c:	d003      	beq.n	8000ba6 <SystemInit+0x9e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000ba4:	d117      	bne.n	8000bd6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <SystemInit+0xec>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d005      	beq.n	8000bbe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <SystemInit+0xec>)
 8000bb4:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <SystemInit+0xf0>)
 8000bb6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <SystemInit+0xec>)
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <SystemInit+0xf4>)
 8000bbc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <SystemInit+0xec>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <SystemInit+0xec>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <SystemInit+0xec>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <SystemInit+0xec>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	61d3      	str	r3, [r2, #28]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	44020c00 	.word	0x44020c00
 8000bec:	eae2eae3 	.word	0xeae2eae3
 8000bf0:	01010280 	.word	0x01010280
 8000bf4:	40022000 	.word	0x40022000
 8000bf8:	08192a3b 	.word	0x08192a3b
 8000bfc:	4c5d6e7f 	.word	0x4c5d6e7f

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c04:	f7ff ff80 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f003 f861 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fb2f 	bl	8000294 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c44:	08003d6c 	.word	0x08003d6c
  ldr r2, =_sbss
 8000c48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c4c:	20000110 	.word	0x20000110

08000c50 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f948 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c5e:	f001 f95d 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8000c62:	4602      	mov	r2, r0
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_Init+0x44>)
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	490b      	ldr	r1, [pc, #44]	@ (8000c9c <HAL_Init+0x48>)
 8000c6e:	5ccb      	ldrb	r3, [r1, r3]
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_Init+0x4c>)
 8000c76:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c78:	2004      	movs	r0, #4
 8000c7a:	f000 f97f 	bl	8000f7c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 f810 	bl	8000ca4 <HAL_InitTick>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e002      	b.n	8000c94 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8e:	f7ff fdfb 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	44020c00 	.word	0x44020c00
 8000c9c:	08003d54 	.word	0x08003d54
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000cb0:	4b33      	ldr	r3, [pc, #204]	@ (8000d80 <HAL_InitTick+0xdc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e05c      	b.n	8000d76 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000cbc:	4b31      	ldr	r3, [pc, #196]	@ (8000d84 <HAL_InitTick+0xe0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <HAL_InitTick+0xe4>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <HAL_InitTick+0xdc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e037      	b.n	8000d52 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ce2:	f000 f9a3 	bl	800102c <HAL_SYSTICK_GetCLKSourceConfig>
 8000ce6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d023      	beq.n	8000d36 <HAL_InitTick+0x92>
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d82d      	bhi.n	8000d50 <HAL_InitTick+0xac>
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_InitTick+0x5e>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d00d      	beq.n	8000d1c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000d00:	e026      	b.n	8000d50 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_InitTick+0xe4>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <HAL_InitTick+0xdc>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d10:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	60fb      	str	r3, [r7, #12]
        break;
 8000d1a:	e01a      	b.n	8000d52 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_InitTick+0xdc>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d2a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	60fb      	str	r3, [r7, #12]
        break;
 8000d34:	e00d      	b.n	8000d52 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_InitTick+0xdc>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	60fb      	str	r3, [r7, #12]
        break;
 8000d4e:	e000      	b.n	8000d52 <HAL_InitTick+0xae>
        break;
 8000d50:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f000 f8f0 	bl	8000f38 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e009      	b.n	8000d76 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d62:	2200      	movs	r2, #0
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	f000 f8cb 	bl	8000f04 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d6e:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	e000e010 	.word	0xe000e010
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	2000010c 	.word	0x2000010c

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000010c 	.word	0x2000010c

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	@ (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	@ (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	@ 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff6a 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f12:	f7ff ff81 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f7ff ffb3 	bl	8000e88 <NVIC_EncodePriority>
 8000f22:	4602      	mov	r2, r0
 8000f24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff82 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00d      	b.n	8000f6a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <HAL_SYSTICK_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <HAL_SYSTICK_Config+0x40>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_SYSTICK_Config+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <HAL_SYSTICK_Config+0x40>)
 8000f62:	f043 0303 	orr.w	r3, r3, #3
 8000f66:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d844      	bhi.n	8001014 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f90 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fb3 	.word	0x08000fb3
 8000f94:	08000fd1 	.word	0x08000fd1
 8000f98:	08000ff3 	.word	0x08000ff3
 8000f9c:	08001015 	.word	0x08001015
 8000fa0:	08000fa5 	.word	0x08000fa5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6013      	str	r3, [r2, #0]
      break;
 8000fb0:	e031      	b.n	8001016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fb8:	f023 0304 	bic.w	r3, r3, #4
 8000fbc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fc4:	4a18      	ldr	r2, [pc, #96]	@ (8001028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fc6:	f023 030c 	bic.w	r3, r3, #12
 8000fca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fce:	e022      	b.n	8001016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a13      	ldr	r2, [pc, #76]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fd6:	f023 0304 	bic.w	r3, r3, #4
 8000fda:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fe2:	f023 030c 	bic.w	r3, r3, #12
 8000fe6:	4a10      	ldr	r2, [pc, #64]	@ (8001028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ff0:	e011      	b.n	8001016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001004:	f023 030c 	bic.w	r3, r3, #12
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001012:	e000      	b.n	8001016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001014:	bf00      	nop
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010
 8001028:	44020c00 	.word	0x44020c00

0800102c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800103e:	2304      	movs	r3, #4
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	e01e      	b.n	8001082 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001046:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b08      	cmp	r3, #8
 8001054:	d00f      	beq.n	8001076 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b08      	cmp	r3, #8
 800105a:	d80f      	bhi.n	800107c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d003      	beq.n	8001070 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001068:	e008      	b.n	800107c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
        break;
 800106e:	e008      	b.n	8001082 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001070:	2301      	movs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
        break;
 8001074:	e005      	b.n	8001082 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001076:	2302      	movs	r3, #2
 8001078:	607b      	str	r3, [r7, #4]
        break;
 800107a:	e002      	b.n	8001082 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
        break;
 8001080:	bf00      	nop
    }
  }
  return systick_source;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e010 	.word	0xe000e010
 8001094:	44020c00 	.word	0x44020c00

08001098 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010a6:	e136      	b.n	8001316 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8128 	beq.w	8001310 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x38>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d125      	bne.n	800111c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 020f 	and.w	r2, r3, #15
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4313      	orrs	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	6979      	ldr	r1, [r7, #20]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4313      	orrs	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d00b      	beq.n	8001170 <HAL_GPIO_Init+0xd8>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001164:	2b11      	cmp	r3, #17
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b12      	cmp	r3, #18
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	4313      	orrs	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4013      	ands	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4013      	ands	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4313      	orrs	r3, r2
 8001202:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d07c      	beq.n	8001310 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001216:	4a47      	ldr	r2, [pc, #284]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3318      	adds	r3, #24
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4013      	ands	r3, r2
 8001238:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0a9a      	lsrs	r2, r3, #10
 800123e:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <HAL_GPIO_Init+0x2a0>)
 8001240:	4013      	ands	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	4093      	lsls	r3, r2
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001252:	4938      	ldr	r1, [pc, #224]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3318      	adds	r3, #24
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001260:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001284:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	4013      	ands	r3, r2
 8001298:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 80012b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4013      	ands	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80012da:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 80012e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001308:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_GPIO_Init+0x29c>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	3301      	adds	r3, #1
 8001314:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	f47f aec1 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	44022000 	.word	0x44022000
 8001338:	002f7f7f 	.word	0x002f7f7f

0800133c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f000 bc28 	b.w	8001ba0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001350:	4b94      	ldr	r3, [pc, #592]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f003 0318 	and.w	r3, r3, #24
 8001358:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800135a:	4b92      	ldr	r3, [pc, #584]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d05b      	beq.n	8001428 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b08      	cmp	r3, #8
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x46>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b18      	cmp	r3, #24
 800137a:	d114      	bne.n	80013a6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d111      	bne.n	80013a6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	f000 bc08 	b.w	8001ba0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001390:	4b84      	ldr	r3, [pc, #528]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	4981      	ldr	r1, [pc, #516]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80013a4:	e040      	b.n	8001428 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d023      	beq.n	80013f6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013ae:	4b7d      	ldr	r3, [pc, #500]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7c      	ldr	r2, [pc, #496]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fcfd 	bl	8000db8 <HAL_GetTick>
 80013be:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80013c2:	f7ff fcf9 	bl	8000db8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e3e5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013d4:	4b73      	ldr	r3, [pc, #460]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80013e0:	4b70      	ldr	r3, [pc, #448]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	041b      	lsls	r3, r3, #16
 80013ee:	496d      	ldr	r1, [pc, #436]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	618b      	str	r3, [r1, #24]
 80013f4:	e018      	b.n	8001428 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013f6:	4b6b      	ldr	r3, [pc, #428]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6a      	ldr	r2, [pc, #424]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80013fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fcd9 	bl	8000db8 <HAL_GetTick>
 8001406:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800140a:	f7ff fcd5 	bl	8000db8 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e3c1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800141c:	4b61      	ldr	r3, [pc, #388]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a0 	beq.w	8001576 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	2b10      	cmp	r3, #16
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x10c>
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b18      	cmp	r3, #24
 8001440:	d109      	bne.n	8001456 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 8092 	bne.w	8001576 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e3a4      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x132>
 8001460:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a4f      	ldr	r2, [pc, #316]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e058      	b.n	8001520 <HAL_RCC_OscConfig+0x1e4>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d112      	bne.n	800149c <HAL_RCC_OscConfig+0x160>
 8001476:	4b4b      	ldr	r3, [pc, #300]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4a      	ldr	r2, [pc, #296]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b48      	ldr	r3, [pc, #288]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a47      	ldr	r2, [pc, #284]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001488:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b45      	ldr	r3, [pc, #276]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a44      	ldr	r2, [pc, #272]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e041      	b.n	8001520 <HAL_RCC_OscConfig+0x1e4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x190>
 80014a6:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a3e      	ldr	r2, [pc, #248]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b3c      	ldr	r3, [pc, #240]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a38      	ldr	r2, [pc, #224]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e029      	b.n	8001520 <HAL_RCC_OscConfig+0x1e4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80014d4:	d112      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
 80014d6:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a2f      	ldr	r2, [pc, #188]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2c      	ldr	r2, [pc, #176]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e011      	b.n	8001520 <HAL_RCC_OscConfig+0x1e4>
 80014fc:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a28      	ldr	r2, [pc, #160]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a22      	ldr	r2, [pc, #136]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800151a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fc46 	bl	8000db8 <HAL_GetTick>
 800152c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001530:	f7ff fc42 	bl	8000db8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e32e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x1f4>
 800154e:	e012      	b.n	8001576 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc32 	bl	8000db8 <HAL_GetTick>
 8001554:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc2e 	bl	8000db8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e31a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_RCC_OscConfig+0x268>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 809a 	beq.w	80016b8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x25a>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b18      	cmp	r3, #24
 800158e:	d149      	bne.n	8001624 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d146      	bne.n	8001624 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e2fe      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
 80015a2:	bf00      	nop
 80015a4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80015ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0218 	and.w	r2, r3, #24
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d014      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80015be:	4b96      	ldr	r3, [pc, #600]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0218 	bic.w	r2, r3, #24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	4993      	ldr	r1, [pc, #588]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80015d0:	f000 fdd0 	bl	8002174 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015d4:	4b91      	ldr	r3, [pc, #580]	@ (800181c <HAL_RCC_OscConfig+0x4e0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fb63 	bl	8000ca4 <HAL_InitTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e2db      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fbe6 	bl	8000db8 <HAL_GetTick>
 80015ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fbe2 	bl	8000db8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e2ce      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001602:	4b85      	ldr	r3, [pc, #532]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800160e:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	497e      	ldr	r1, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001622:	e049      	b.n	80016b8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02c      	beq.n	8001686 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800162c:	4b7a      	ldr	r3, [pc, #488]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 0218 	bic.w	r2, r3, #24
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4977      	ldr	r1, [pc, #476]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800163e:	4b76      	ldr	r3, [pc, #472]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fbb5 	bl	8000db8 <HAL_GetTick>
 800164e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001652:	f7ff fbb1 	bl	8000db8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e29d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001664:	4b6c      	ldr	r3, [pc, #432]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001670:	4b69      	ldr	r3, [pc, #420]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	4966      	ldr	r1, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	610b      	str	r3, [r1, #16]
 8001684:	e018      	b.n	80016b8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b64      	ldr	r3, [pc, #400]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a63      	ldr	r2, [pc, #396]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb91 	bl	8000db8 <HAL_GetTick>
 8001696:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800169a:	f7ff fb8d 	bl	8000db8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e279      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03c      	beq.n	800173e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016cc:	4b52      	ldr	r3, [pc, #328]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80016ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d2:	4a51      	ldr	r2, [pc, #324]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80016d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb6c 	bl	8000db8 <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fb68 	bl	8000db8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e254      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016f6:	4b48      	ldr	r3, [pc, #288]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80016f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ef      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3a8>
 8001704:	e01b      	b.n	800173e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b44      	ldr	r3, [pc, #272]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800170c:	4a42      	ldr	r2, [pc, #264]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800170e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fb4f 	bl	8000db8 <HAL_GetTick>
 800171a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800171e:	f7ff fb4b 	bl	8000db8 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e237      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001730:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ef      	bne.n	800171e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80d2 	beq.w	80018f0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800174c:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_RCC_OscConfig+0x4e4>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d118      	bne.n	800178a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001758:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <HAL_RCC_OscConfig+0x4e4>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	4a30      	ldr	r2, [pc, #192]	@ (8001820 <HAL_RCC_OscConfig+0x4e4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001764:	f7ff fb28 	bl	8000db8 <HAL_GetTick>
 8001768:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176c:	f7ff fb24 	bl	8000db8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e210      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_RCC_OscConfig+0x4e4>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x468>
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001798:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017a2:	e074      	b.n	800188e <HAL_RCC_OscConfig+0x552>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d118      	bne.n	80017de <HAL_RCC_OscConfig+0x4a2>
 80017ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017c2:	4a15      	ldr	r2, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d2:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017dc:	e057      	b.n	800188e <HAL_RCC_OscConfig+0x552>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d11e      	bne.n	8001824 <HAL_RCC_OscConfig+0x4e8>
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017fc:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001802:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 8001808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800180c:	4a02      	ldr	r2, [pc, #8]	@ (8001818 <HAL_RCC_OscConfig+0x4dc>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001816:	e03a      	b.n	800188e <HAL_RCC_OscConfig+0x552>
 8001818:	44020c00 	.word	0x44020c00
 800181c:	20000004 	.word	0x20000004
 8001820:	44020800 	.word	0x44020800
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b85      	cmp	r3, #133	@ 0x85
 800182a:	d118      	bne.n	800185e <HAL_RCC_OscConfig+0x522>
 800182c:	4ba2      	ldr	r3, [pc, #648]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800182e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001832:	4aa1      	ldr	r2, [pc, #644]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800183c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800183e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001842:	4a9d      	ldr	r2, [pc, #628]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001848:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800184c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800184e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001852:	4a99      	ldr	r2, [pc, #612]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800185c:	e017      	b.n	800188e <HAL_RCC_OscConfig+0x552>
 800185e:	4b96      	ldr	r3, [pc, #600]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001864:	4a94      	ldr	r2, [pc, #592]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800186e:	4b92      	ldr	r3, [pc, #584]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001874:	4a90      	ldr	r2, [pc, #576]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800187e:	4b8e      	ldr	r3, [pc, #568]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001884:	4a8c      	ldr	r2, [pc, #560]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800188a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fa8f 	bl	8000db8 <HAL_GetTick>
 800189a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff fa8b 	bl	8000db8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e175      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b4:	4b80      	ldr	r3, [pc, #512]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 80018b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0ed      	beq.n	800189e <HAL_RCC_OscConfig+0x562>
 80018c2:	e015      	b.n	80018f0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa78 	bl	8000db8 <HAL_GetTick>
 80018c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fa74 	bl	8000db8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e15e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e2:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 80018e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ed      	bne.n	80018cc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d036      	beq.n	800196a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	2b00      	cmp	r3, #0
 8001902:	d019      	beq.n	8001938 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001904:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6b      	ldr	r2, [pc, #428]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800190a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800190e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fa52 	bl	8000db8 <HAL_GetTick>
 8001914:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001918:	f7ff fa4e 	bl	8000db8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e13a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800192a:	4b63      	ldr	r3, [pc, #396]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x5dc>
 8001936:	e018      	b.n	800196a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001938:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800193e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001942:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa38 	bl	8000db8 <HAL_GetTick>
 8001948:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800194c:	f7ff fa34 	bl	8000db8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e120      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800195e:	4b56      	ldr	r3, [pc, #344]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8115 	beq.w	8001b9e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b18      	cmp	r3, #24
 8001978:	f000 80af 	beq.w	8001ada <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	2b02      	cmp	r3, #2
 8001982:	f040 8086 	bne.w	8001a92 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001986:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 800198c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fa11 	bl	8000db8 <HAL_GetTick>
 8001996:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800199a:	f7ff fa0d 	bl	8000db8 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0f9      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80019ac:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80019b8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019c0:	f023 0303 	bic.w	r3, r3, #3
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019cc:	0212      	lsls	r2, r2, #8
 80019ce:	430a      	orrs	r2, r1
 80019d0:	4939      	ldr	r1, [pc, #228]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019da:	3b01      	subs	r3, #1
 80019dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e4:	3b01      	subs	r3, #1
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f0:	3b01      	subs	r3, #1
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	3b01      	subs	r3, #1
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a06:	492c      	ldr	r1, [pc, #176]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a12:	f023 0310 	bic.w	r3, r3, #16
 8001a16:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001a22:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001a2e:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	f023 020c 	bic.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	491f      	ldr	r1, [pc, #124]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	f023 0220 	bic.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a4c:	491a      	ldr	r1, [pc, #104]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a5c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f9a5 	bl	8000db8 <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f9a1 	bl	8000db8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e08d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x736>
 8001a90:	e085      	b.n	8001b9e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <HAL_RCC_OscConfig+0x77c>)
 8001a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f98b 	bl	8000db8 <HAL_GetTick>
 8001aa2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff f987 	bl	8000db8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d903      	bls.n	8001abc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e073      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
 8001ab8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001abc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	4a36      	ldr	r2, [pc, #216]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001ace:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ad8:	e061      	b.n	8001b9e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ada:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d031      	beq.n	8001b52 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d12a      	bne.n	8001b52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d122      	bne.n	8001b52 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b16:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d11a      	bne.n	8001b52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	0a5b      	lsrs	r3, r3, #9
 8001b20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b28:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d111      	bne.n	8001b52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	0e1b      	lsrs	r3, r3, #24
 8001b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e024      	b.n	8001ba0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d01a      	beq.n	8001b9e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001b6e:	f023 0310 	bic.w	r3, r3, #16
 8001b72:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f920 	bl	8000db8 <HAL_GetTick>
 8001b78:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff f91c 	bl	8000db8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d0f9      	beq.n	8001b7c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_RCC_OscConfig+0x86c>)
 8001b98:	f043 0310 	orr.w	r3, r3, #16
 8001b9c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	44020c00 	.word	0x44020c00

08001bac <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e19e      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_ClockConfig+0x224>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b80      	ldr	r3, [pc, #512]	@ (8001dd0 <HAL_RCC_ClockConfig+0x224>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 020f 	bic.w	r2, r3, #15
 8001bd6:	497e      	ldr	r1, [pc, #504]	@ (8001dd0 <HAL_RCC_ClockConfig+0x224>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd0 <HAL_RCC_ClockConfig+0x224>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e186      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	4b74      	ldr	r3, [pc, #464]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d909      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001c0e:	4b71      	ldr	r3, [pc, #452]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	496d      	ldr	r1, [pc, #436]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d909      	bls.n	8001c54 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c40:	4b64      	ldr	r3, [pc, #400]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4961      	ldr	r1, [pc, #388]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d908      	bls.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c70:	4b58      	ldr	r3, [pc, #352]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4955      	ldr	r1, [pc, #340]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4b50      	ldr	r3, [pc, #320]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d908      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	f023 020f 	bic.w	r2, r3, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	494a      	ldr	r1, [pc, #296]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8093 	beq.w	8001de4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e113      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e107      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001cf6:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0fb      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d06:	4b33      	ldr	r3, [pc, #204]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0f3      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001d16:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	492c      	ldr	r1, [pc, #176]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d28:	f7ff f846 	bl	8000db8 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f83e 	bl	8000db8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0d7      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0318 	and.w	r3, r3, #24
 8001d56:	2b18      	cmp	r3, #24
 8001d58:	d1ee      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x18c>
 8001d5a:	e043      	b.n	8001de4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d112      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d66:	f7ff f827 	bl	8000db8 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0c0      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 0318 	and.w	r3, r3, #24
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x1ba>
 8001d88:	e02c      	b.n	8001de4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d122      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff f810 	bl	8000db8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0a9      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x228>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0318 	and.w	r3, r3, #24
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d1ee      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7fe fffe 	bl	8000db8 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d906      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e097      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f003 0318 	and.w	r3, r3, #24
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e9      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d010      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d208      	bcs.n	8001e12 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001e00:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f023 020f 	bic.w	r2, r3, #15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	493e      	ldr	r1, [pc, #248]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e12:	4b3e      	ldr	r3, [pc, #248]	@ (8001f0c <HAL_RCC_ClockConfig+0x360>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d210      	bcs.n	8001e42 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <HAL_RCC_ClockConfig+0x360>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 020f 	bic.w	r2, r3, #15
 8001e28:	4938      	ldr	r1, [pc, #224]	@ (8001f0c <HAL_RCC_ClockConfig+0x360>)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_RCC_ClockConfig+0x360>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e05d      	b.n	8001efe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d208      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4927      	ldr	r1, [pc, #156]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d209      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	491a      	ldr	r1, [pc, #104]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d209      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ed4:	f000 f822 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_ClockConfig+0x35c>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490b      	ldr	r1, [pc, #44]	@ (8001f10 <HAL_RCC_ClockConfig+0x364>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <HAL_RCC_ClockConfig+0x368>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_RCC_ClockConfig+0x36c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fed6 	bl	8000ca4 <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001efc:	7afb      	ldrb	r3, [r7, #11]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	44020c00 	.word	0x44020c00
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	08003d54 	.word	0x08003d54
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001f22:	4b8c      	ldr	r3, [pc, #560]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 0318 	and.w	r3, r3, #24
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e107      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f34:	4b87      	ldr	r3, [pc, #540]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 0318 	and.w	r3, r3, #24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f40:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f4c:	4b81      	ldr	r3, [pc, #516]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	4a81      	ldr	r2, [pc, #516]	@ (800215c <HAL_RCC_GetSysClockFreq+0x240>)
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e0f1      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001f60:	4b7e      	ldr	r3, [pc, #504]	@ (800215c <HAL_RCC_GetSysClockFreq+0x240>)
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	e0ee      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f66:	4b7b      	ldr	r3, [pc, #492]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0318 	and.w	r3, r3, #24
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f72:	4b7b      	ldr	r3, [pc, #492]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x244>)
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e0e5      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f78:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 0318 	and.w	r3, r3, #24
 8001f80:	2b18      	cmp	r3, #24
 8001f82:	f040 80dd 	bne.w	8002140 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001f86:	4b73      	ldr	r3, [pc, #460]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001f90:	4b70      	ldr	r3, [pc, #448]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001f9c:	4b6d      	ldr	r3, [pc, #436]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80b7 	beq.w	800213a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0xbe>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d056      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x16a>
 8001fd8:	e077      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001fda:	4b5e      	ldr	r3, [pc, #376]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d02d      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	08db      	lsrs	r3, r3, #3
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800215c <HAL_RCC_GetSysClockFreq+0x240>)
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002010:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002020:	ed97 6a02 	vldr	s12, [r7, #8]
 8002024:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002164 <HAL_RCC_GetSysClockFreq+0x248>
 8002028:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800202c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002034:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002040:	e065      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x24c>
 8002050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002054:	4b3f      	ldr	r3, [pc, #252]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8002056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002064:	ed97 6a02 	vldr	s12, [r7, #8]
 8002068:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002164 <HAL_RCC_GetSysClockFreq+0x248>
 800206c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002070:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002078:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002084:	e043      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800216c <HAL_RCC_GetSysClockFreq+0x250>
 8002094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002098:	4b2e      	ldr	r3, [pc, #184]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ac:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002164 <HAL_RCC_GetSysClockFreq+0x248>
 80020b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80020c8:	e021      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002170 <HAL_RCC_GetSysClockFreq+0x254>
 80020d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 80020de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002164 <HAL_RCC_GetSysClockFreq+0x248>
 80020f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002100:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800210c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x238>)
 8002110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002112:	0a5b      	lsrs	r3, r3, #9
 8002114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002118:	3301      	adds	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002126:	edd7 6a06 	vldr	s13, [r7, #24]
 800212a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002132:	ee17 3a90 	vmov	r3, s15
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e004      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e001      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_GetSysClockFreq+0x240>)
 8002142:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002144:	69fb      	ldr	r3, [r7, #28]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	44020c00 	.word	0x44020c00
 8002158:	003d0900 	.word	0x003d0900
 800215c:	03d09000 	.word	0x03d09000
 8002160:	017d7840 	.word	0x017d7840
 8002164:	46000000 	.word	0x46000000
 8002168:	4c742400 	.word	0x4c742400
 800216c:	4bbebc20 	.word	0x4bbebc20
 8002170:	4a742400 	.word	0x4a742400

08002174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002178:	f7ff fed0 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002182:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002186:	4907      	ldr	r1, [pc, #28]	@ (80021a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800218a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002194:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002198:	681b      	ldr	r3, [r3, #0]
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	44020c00 	.word	0x44020c00
 80021a4:	08003d54 	.word	0x08003d54
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e049      	b.n	8002252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fb82 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 fd46 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e049      	b.n	8002300 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f841 	bl	8002308 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f000 fcef 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_TIM_OC_Start+0x24>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e03c      	b.n	80023ba <HAL_TIM_OC_Start+0x9e>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d109      	bne.n	800235a <HAL_TIM_OC_Start+0x3e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e02f      	b.n	80023ba <HAL_TIM_OC_Start+0x9e>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d109      	bne.n	8002374 <HAL_TIM_OC_Start+0x58>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e022      	b.n	80023ba <HAL_TIM_OC_Start+0x9e>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d109      	bne.n	800238e <HAL_TIM_OC_Start+0x72>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e015      	b.n	80023ba <HAL_TIM_OC_Start+0x9e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b10      	cmp	r3, #16
 8002392:	d109      	bne.n	80023a8 <HAL_TIM_OC_Start+0x8c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e008      	b.n	80023ba <HAL_TIM_OC_Start+0x9e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ce      	b.n	8002560 <HAL_TIM_OC_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_OC_Start+0xb6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d0:	e023      	b.n	800241a <HAL_TIM_OC_Start+0xfe>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d104      	bne.n	80023e2 <HAL_TIM_OC_Start+0xc6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e0:	e01b      	b.n	800241a <HAL_TIM_OC_Start+0xfe>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d104      	bne.n	80023f2 <HAL_TIM_OC_Start+0xd6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f0:	e013      	b.n	800241a <HAL_TIM_OC_Start+0xfe>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_OC_Start+0xe6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002400:	e00b      	b.n	800241a <HAL_TIM_OC_Start+0xfe>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d104      	bne.n	8002412 <HAL_TIM_OC_Start+0xf6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002410:	e003      	b.n	800241a <HAL_TIM_OC_Start+0xfe>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2201      	movs	r2, #1
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f9b1 	bl	800378a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4e      	ldr	r2, [pc, #312]	@ (8002568 <HAL_TIM_OC_Start+0x24c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d018      	beq.n	8002464 <HAL_TIM_OC_Start+0x148>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a4d      	ldr	r2, [pc, #308]	@ (800256c <HAL_TIM_OC_Start+0x250>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d013      	beq.n	8002464 <HAL_TIM_OC_Start+0x148>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4b      	ldr	r2, [pc, #300]	@ (8002570 <HAL_TIM_OC_Start+0x254>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00e      	beq.n	8002464 <HAL_TIM_OC_Start+0x148>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a4a      	ldr	r2, [pc, #296]	@ (8002574 <HAL_TIM_OC_Start+0x258>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_TIM_OC_Start+0x148>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a48      	ldr	r2, [pc, #288]	@ (8002578 <HAL_TIM_OC_Start+0x25c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_TIM_OC_Start+0x148>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a47      	ldr	r2, [pc, #284]	@ (800257c <HAL_TIM_OC_Start+0x260>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_TIM_OC_Start+0x14c>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_TIM_OC_Start+0x14e>
 8002468:	2300      	movs	r3, #0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a39      	ldr	r2, [pc, #228]	@ (8002568 <HAL_TIM_OC_Start+0x24c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d04a      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a37      	ldr	r2, [pc, #220]	@ (800256c <HAL_TIM_OC_Start+0x250>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d045      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800249a:	d040      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a4:	d03b      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a35      	ldr	r2, [pc, #212]	@ (8002580 <HAL_TIM_OC_Start+0x264>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d036      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a33      	ldr	r2, [pc, #204]	@ (8002584 <HAL_TIM_OC_Start+0x268>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a32      	ldr	r2, [pc, #200]	@ (8002588 <HAL_TIM_OC_Start+0x26c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d02c      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a30      	ldr	r2, [pc, #192]	@ (800258c <HAL_TIM_OC_Start+0x270>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d027      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002590 <HAL_TIM_OC_Start+0x274>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002594 <HAL_TIM_OC_Start+0x278>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01d      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <HAL_TIM_OC_Start+0x254>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d018      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a20      	ldr	r2, [pc, #128]	@ (8002574 <HAL_TIM_OC_Start+0x258>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <HAL_TIM_OC_Start+0x27c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00e      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a25      	ldr	r2, [pc, #148]	@ (800259c <HAL_TIM_OC_Start+0x280>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1a      	ldr	r2, [pc, #104]	@ (8002578 <HAL_TIM_OC_Start+0x25c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_TIM_OC_Start+0x202>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_TIM_OC_Start+0x260>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d115      	bne.n	800254a <HAL_TIM_OC_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <HAL_TIM_OC_Start+0x284>)
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b06      	cmp	r3, #6
 800252e:	d015      	beq.n	800255c <HAL_TIM_OC_Start+0x240>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002536:	d011      	beq.n	800255c <HAL_TIM_OC_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	e008      	b.n	800255c <HAL_TIM_OC_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e000      	b.n	800255e <HAL_TIM_OC_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40012c00 	.word	0x40012c00
 800256c:	50012c00 	.word	0x50012c00
 8002570:	40013400 	.word	0x40013400
 8002574:	50013400 	.word	0x50013400
 8002578:	40014000 	.word	0x40014000
 800257c:	50014000 	.word	0x50014000
 8002580:	40000400 	.word	0x40000400
 8002584:	50000400 	.word	0x50000400
 8002588:	40000800 	.word	0x40000800
 800258c:	50000800 	.word	0x50000800
 8002590:	40000c00 	.word	0x40000c00
 8002594:	50000c00 	.word	0x50000c00
 8002598:	40001800 	.word	0x40001800
 800259c:	50001800 	.word	0x50001800
 80025a0:	00010007 	.word	0x00010007

080025a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e049      	b.n	800264a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe f964 	bl	8000898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fb4a 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_TIM_PWM_Start+0x24>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e03c      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d109      	bne.n	8002692 <HAL_TIM_PWM_Start+0x3e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e02f      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x58>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x72>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x8c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0ce      	b.n	8002898 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0xb6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002708:	e023      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0xc6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002718:	e01b      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xd6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002728:	e013      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d104      	bne.n	800273a <HAL_TIM_PWM_Start+0xe6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002738:	e00b      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b10      	cmp	r3, #16
 800273e:	d104      	bne.n	800274a <HAL_TIM_PWM_Start+0xf6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002748:	e003      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f815 	bl	800378a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a4e      	ldr	r2, [pc, #312]	@ (80028a0 <HAL_TIM_PWM_Start+0x24c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_TIM_PWM_Start+0x148>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a4d      	ldr	r2, [pc, #308]	@ (80028a4 <HAL_TIM_PWM_Start+0x250>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_TIM_PWM_Start+0x148>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a4b      	ldr	r2, [pc, #300]	@ (80028a8 <HAL_TIM_PWM_Start+0x254>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_TIM_PWM_Start+0x148>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4a      	ldr	r2, [pc, #296]	@ (80028ac <HAL_TIM_PWM_Start+0x258>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_TIM_PWM_Start+0x148>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a48      	ldr	r2, [pc, #288]	@ (80028b0 <HAL_TIM_PWM_Start+0x25c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_TIM_PWM_Start+0x148>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a47      	ldr	r2, [pc, #284]	@ (80028b4 <HAL_TIM_PWM_Start+0x260>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_TIM_PWM_Start+0x14c>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_TIM_PWM_Start+0x14e>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a39      	ldr	r2, [pc, #228]	@ (80028a0 <HAL_TIM_PWM_Start+0x24c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04a      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a37      	ldr	r2, [pc, #220]	@ (80028a4 <HAL_TIM_PWM_Start+0x250>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d045      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d2:	d040      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027dc:	d03b      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a35      	ldr	r2, [pc, #212]	@ (80028b8 <HAL_TIM_PWM_Start+0x264>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d036      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a33      	ldr	r2, [pc, #204]	@ (80028bc <HAL_TIM_PWM_Start+0x268>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a32      	ldr	r2, [pc, #200]	@ (80028c0 <HAL_TIM_PWM_Start+0x26c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02c      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_TIM_PWM_Start+0x270>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d027      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2f      	ldr	r2, [pc, #188]	@ (80028c8 <HAL_TIM_PWM_Start+0x274>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <HAL_TIM_PWM_Start+0x278>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a22      	ldr	r2, [pc, #136]	@ (80028a8 <HAL_TIM_PWM_Start+0x254>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d018      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a20      	ldr	r2, [pc, #128]	@ (80028ac <HAL_TIM_PWM_Start+0x258>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_TIM_PWM_Start+0x27c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <HAL_TIM_PWM_Start+0x280>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1a      	ldr	r2, [pc, #104]	@ (80028b0 <HAL_TIM_PWM_Start+0x25c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_TIM_PWM_Start+0x202>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <HAL_TIM_PWM_Start+0x260>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d115      	bne.n	8002882 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_TIM_PWM_Start+0x284>)
 800285e:	4013      	ands	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d015      	beq.n	8002894 <HAL_TIM_PWM_Start+0x240>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800286e:	d011      	beq.n	8002894 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	e008      	b.n	8002894 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	50012c00 	.word	0x50012c00
 80028a8:	40013400 	.word	0x40013400
 80028ac:	50013400 	.word	0x50013400
 80028b0:	40014000 	.word	0x40014000
 80028b4:	50014000 	.word	0x50014000
 80028b8:	40000400 	.word	0x40000400
 80028bc:	50000400 	.word	0x50000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	50000800 	.word	0x50000800
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	50000c00 	.word	0x50000c00
 80028d0:	40001800 	.word	0x40001800
 80028d4:	50001800 	.word	0x50001800
 80028d8:	00010007 	.word	0x00010007

080028dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e066      	b.n	80029c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b14      	cmp	r3, #20
 8002906:	d857      	bhi.n	80029b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002908:	a201      	add	r2, pc, #4	@ (adr r2, 8002910 <HAL_TIM_OC_ConfigChannel+0x34>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002965 	.word	0x08002965
 8002914:	080029b9 	.word	0x080029b9
 8002918:	080029b9 	.word	0x080029b9
 800291c:	080029b9 	.word	0x080029b9
 8002920:	08002973 	.word	0x08002973
 8002924:	080029b9 	.word	0x080029b9
 8002928:	080029b9 	.word	0x080029b9
 800292c:	080029b9 	.word	0x080029b9
 8002930:	08002981 	.word	0x08002981
 8002934:	080029b9 	.word	0x080029b9
 8002938:	080029b9 	.word	0x080029b9
 800293c:	080029b9 	.word	0x080029b9
 8002940:	0800298f 	.word	0x0800298f
 8002944:	080029b9 	.word	0x080029b9
 8002948:	080029b9 	.word	0x080029b9
 800294c:	080029b9 	.word	0x080029b9
 8002950:	0800299d 	.word	0x0800299d
 8002954:	080029b9 	.word	0x080029b9
 8002958:	080029b9 	.word	0x080029b9
 800295c:	080029b9 	.word	0x080029b9
 8002960:	080029ab 	.word	0x080029ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa70 	bl	8002e50 <TIM_OC1_SetConfig>
      break;
 8002970:	e025      	b.n	80029be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fb03 	bl	8002f84 <TIM_OC2_SetConfig>
      break;
 800297e:	e01e      	b.n	80029be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fb94 	bl	80030b4 <TIM_OC3_SetConfig>
      break;
 800298c:	e017      	b.n	80029be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fc23 	bl	80031e0 <TIM_OC4_SetConfig>
      break;
 800299a:	e010      	b.n	80029be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fcb4 	bl	8003310 <TIM_OC5_SetConfig>
      break;
 80029a8:	e009      	b.n	80029be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fd17 	bl	80033e4 <TIM_OC6_SetConfig>
      break;
 80029b6:	e002      	b.n	80029be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
      break;
 80029bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e0ff      	b.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b14      	cmp	r3, #20
 80029fa:	f200 80f0 	bhi.w	8002bde <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a59 	.word	0x08002a59
 8002a08:	08002bdf 	.word	0x08002bdf
 8002a0c:	08002bdf 	.word	0x08002bdf
 8002a10:	08002bdf 	.word	0x08002bdf
 8002a14:	08002a99 	.word	0x08002a99
 8002a18:	08002bdf 	.word	0x08002bdf
 8002a1c:	08002bdf 	.word	0x08002bdf
 8002a20:	08002bdf 	.word	0x08002bdf
 8002a24:	08002adb 	.word	0x08002adb
 8002a28:	08002bdf 	.word	0x08002bdf
 8002a2c:	08002bdf 	.word	0x08002bdf
 8002a30:	08002bdf 	.word	0x08002bdf
 8002a34:	08002b1b 	.word	0x08002b1b
 8002a38:	08002bdf 	.word	0x08002bdf
 8002a3c:	08002bdf 	.word	0x08002bdf
 8002a40:	08002bdf 	.word	0x08002bdf
 8002a44:	08002b5d 	.word	0x08002b5d
 8002a48:	08002bdf 	.word	0x08002bdf
 8002a4c:	08002bdf 	.word	0x08002bdf
 8002a50:	08002bdf 	.word	0x08002bdf
 8002a54:	08002b9d 	.word	0x08002b9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f9f6 	bl	8002e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6999      	ldr	r1, [r3, #24]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	619a      	str	r2, [r3, #24]
      break;
 8002a96:	e0a5      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fa70 	bl	8002f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6999      	ldr	r1, [r3, #24]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	021a      	lsls	r2, r3, #8
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	619a      	str	r2, [r3, #24]
      break;
 8002ad8:	e084      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fae7 	bl	80030b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0208 	orr.w	r2, r2, #8
 8002af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0204 	bic.w	r2, r2, #4
 8002b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	61da      	str	r2, [r3, #28]
      break;
 8002b18:	e064      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fb5d 	bl	80031e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69d9      	ldr	r1, [r3, #28]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	021a      	lsls	r2, r3, #8
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	61da      	str	r2, [r3, #28]
      break;
 8002b5a:	e043      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fbd4 	bl	8003310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0208 	orr.w	r2, r2, #8
 8002b76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0204 	bic.w	r2, r2, #4
 8002b86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002b9a:	e023      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fc1e 	bl	80033e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	021a      	lsls	r2, r3, #8
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002bdc:	e002      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
      break;
 8002be2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop

08002bf8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e031      	b.n	8002c74 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fc4a 	bl	80034bc <TIM_SlaveTimer_SetConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e018      	b.n	8002c74 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c50:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c60:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a62      	ldr	r2, [pc, #392]	@ (8002e18 <TIM_Base_SetConfig+0x19c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02b      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a61      	ldr	r2, [pc, #388]	@ (8002e1c <TIM_Base_SetConfig+0x1a0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d027      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca2:	d023      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002caa:	d01f      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a5c      	ldr	r2, [pc, #368]	@ (8002e20 <TIM_Base_SetConfig+0x1a4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01b      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e24 <TIM_Base_SetConfig+0x1a8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d017      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a5a      	ldr	r2, [pc, #360]	@ (8002e28 <TIM_Base_SetConfig+0x1ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a59      	ldr	r2, [pc, #356]	@ (8002e2c <TIM_Base_SetConfig+0x1b0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00f      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <TIM_Base_SetConfig+0x1b4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a57      	ldr	r2, [pc, #348]	@ (8002e34 <TIM_Base_SetConfig+0x1b8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a56      	ldr	r2, [pc, #344]	@ (8002e38 <TIM_Base_SetConfig+0x1bc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_Base_SetConfig+0x70>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a55      	ldr	r2, [pc, #340]	@ (8002e3c <TIM_Base_SetConfig+0x1c0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a45      	ldr	r2, [pc, #276]	@ (8002e18 <TIM_Base_SetConfig+0x19c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a44      	ldr	r2, [pc, #272]	@ (8002e1c <TIM_Base_SetConfig+0x1a0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d037      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d14:	d033      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d1c:	d02f      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a3f      	ldr	r2, [pc, #252]	@ (8002e20 <TIM_Base_SetConfig+0x1a4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02b      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a3e      	ldr	r2, [pc, #248]	@ (8002e24 <TIM_Base_SetConfig+0x1a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a3d      	ldr	r2, [pc, #244]	@ (8002e28 <TIM_Base_SetConfig+0x1ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d023      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a3c      	ldr	r2, [pc, #240]	@ (8002e2c <TIM_Base_SetConfig+0x1b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a3b      	ldr	r2, [pc, #236]	@ (8002e30 <TIM_Base_SetConfig+0x1b4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	@ (8002e34 <TIM_Base_SetConfig+0x1b8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a39      	ldr	r2, [pc, #228]	@ (8002e38 <TIM_Base_SetConfig+0x1bc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a38      	ldr	r2, [pc, #224]	@ (8002e3c <TIM_Base_SetConfig+0x1c0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a37      	ldr	r2, [pc, #220]	@ (8002e40 <TIM_Base_SetConfig+0x1c4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a36      	ldr	r2, [pc, #216]	@ (8002e44 <TIM_Base_SetConfig+0x1c8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a35      	ldr	r2, [pc, #212]	@ (8002e48 <TIM_Base_SetConfig+0x1cc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0x102>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a34      	ldr	r2, [pc, #208]	@ (8002e4c <TIM_Base_SetConfig+0x1d0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <TIM_Base_SetConfig+0x19c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <TIM_Base_SetConfig+0x168>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <TIM_Base_SetConfig+0x1a0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00f      	beq.n	8002de4 <TIM_Base_SetConfig+0x168>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e38 <TIM_Base_SetConfig+0x1bc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <TIM_Base_SetConfig+0x168>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <TIM_Base_SetConfig+0x1c0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <TIM_Base_SetConfig+0x168>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <TIM_Base_SetConfig+0x1cc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <TIM_Base_SetConfig+0x168>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <TIM_Base_SetConfig+0x1d0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d103      	bne.n	8002dec <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	50012c00 	.word	0x50012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	50000400 	.word	0x50000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	50000800 	.word	0x50000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	50000c00 	.word	0x50000c00
 8002e38:	40013400 	.word	0x40013400
 8002e3c:	50013400 	.word	0x50013400
 8002e40:	40001800 	.word	0x40001800
 8002e44:	50001800 	.word	0x50001800
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	50014000 	.word	0x50014000

08002e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 0201 	bic.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 0302 	bic.w	r3, r3, #2
 8002e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a30      	ldr	r2, [pc, #192]	@ (8002f6c <TIM_OC1_SetConfig+0x11c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x88>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f70 <TIM_OC1_SetConfig+0x120>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x88>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2e      	ldr	r2, [pc, #184]	@ (8002f74 <TIM_OC1_SetConfig+0x124>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x88>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f78 <TIM_OC1_SetConfig+0x128>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x88>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <TIM_OC1_SetConfig+0x12c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x88>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8002f80 <TIM_OC1_SetConfig+0x130>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10c      	bne.n	8002ef2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0308 	bic.w	r3, r3, #8
 8002ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <TIM_OC1_SetConfig+0x11c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <TIM_OC1_SetConfig+0xd2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <TIM_OC1_SetConfig+0x120>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_OC1_SetConfig+0xd2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1b      	ldr	r2, [pc, #108]	@ (8002f74 <TIM_OC1_SetConfig+0x124>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_OC1_SetConfig+0xd2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f78 <TIM_OC1_SetConfig+0x128>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_OC1_SetConfig+0xd2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a19      	ldr	r2, [pc, #100]	@ (8002f7c <TIM_OC1_SetConfig+0x12c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_OC1_SetConfig+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	@ (8002f80 <TIM_OC1_SetConfig+0x130>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d111      	bne.n	8002f46 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	50012c00 	.word	0x50012c00
 8002f74:	40013400 	.word	0x40013400
 8002f78:	50013400 	.word	0x50013400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	50014000 	.word	0x50014000

08002f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 0210 	bic.w	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0320 	bic.w	r3, r3, #32
 8002fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800309c <TIM_OC2_SetConfig+0x118>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_OC2_SetConfig+0x7c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2d      	ldr	r2, [pc, #180]	@ (80030a0 <TIM_OC2_SetConfig+0x11c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_OC2_SetConfig+0x7c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80030a4 <TIM_OC2_SetConfig+0x120>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC2_SetConfig+0x7c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80030a8 <TIM_OC2_SetConfig+0x124>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <TIM_OC2_SetConfig+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <TIM_OC2_SetConfig+0xc8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <TIM_OC2_SetConfig+0x11c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_OC2_SetConfig+0xc8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1d      	ldr	r2, [pc, #116]	@ (80030a4 <TIM_OC2_SetConfig+0x120>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_OC2_SetConfig+0xc8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <TIM_OC2_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_OC2_SetConfig+0xc8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ac <TIM_OC2_SetConfig+0x128>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC2_SetConfig+0xc8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <TIM_OC2_SetConfig+0x12c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d113      	bne.n	8003074 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	50012c00 	.word	0x50012c00
 80030a4:	40013400 	.word	0x40013400
 80030a8:	50013400 	.word	0x50013400
 80030ac:	40014000 	.word	0x40014000
 80030b0:	50014000 	.word	0x50014000

080030b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2d      	ldr	r2, [pc, #180]	@ (80031c8 <TIM_OC3_SetConfig+0x114>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_OC3_SetConfig+0x7a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2c      	ldr	r2, [pc, #176]	@ (80031cc <TIM_OC3_SetConfig+0x118>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <TIM_OC3_SetConfig+0x7a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2b      	ldr	r2, [pc, #172]	@ (80031d0 <TIM_OC3_SetConfig+0x11c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_OC3_SetConfig+0x7a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2a      	ldr	r2, [pc, #168]	@ (80031d4 <TIM_OC3_SetConfig+0x120>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10d      	bne.n	800314a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1e      	ldr	r2, [pc, #120]	@ (80031c8 <TIM_OC3_SetConfig+0x114>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <TIM_OC3_SetConfig+0xc6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <TIM_OC3_SetConfig+0x118>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00f      	beq.n	800317a <TIM_OC3_SetConfig+0xc6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1c      	ldr	r2, [pc, #112]	@ (80031d0 <TIM_OC3_SetConfig+0x11c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_OC3_SetConfig+0xc6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1b      	ldr	r2, [pc, #108]	@ (80031d4 <TIM_OC3_SetConfig+0x120>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_OC3_SetConfig+0xc6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1a      	ldr	r2, [pc, #104]	@ (80031d8 <TIM_OC3_SetConfig+0x124>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_OC3_SetConfig+0xc6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <TIM_OC3_SetConfig+0x128>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d113      	bne.n	80031a2 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	50012c00 	.word	0x50012c00
 80031d0:	40013400 	.word	0x40013400
 80031d4:	50013400 	.word	0x50013400
 80031d8:	40014000 	.word	0x40014000
 80031dc:	50014000 	.word	0x50014000

080031e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800322e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	031b      	lsls	r3, r3, #12
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <TIM_OC4_SetConfig+0x118>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00b      	beq.n	800325c <TIM_OC4_SetConfig+0x7c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <TIM_OC4_SetConfig+0x11c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_OC4_SetConfig+0x7c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <TIM_OC4_SetConfig+0x120>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC4_SetConfig+0x7c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a2b      	ldr	r2, [pc, #172]	@ (8003304 <TIM_OC4_SetConfig+0x124>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10d      	bne.n	8003278 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	031b      	lsls	r3, r3, #12
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <TIM_OC4_SetConfig+0x118>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <TIM_OC4_SetConfig+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <TIM_OC4_SetConfig+0x11c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00f      	beq.n	80032a8 <TIM_OC4_SetConfig+0xc8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <TIM_OC4_SetConfig+0x120>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <TIM_OC4_SetConfig+0xc8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <TIM_OC4_SetConfig+0x124>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_OC4_SetConfig+0xc8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <TIM_OC4_SetConfig+0x128>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_OC4_SetConfig+0xc8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	@ (800330c <TIM_OC4_SetConfig+0x12c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d113      	bne.n	80032d0 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	50012c00 	.word	0x50012c00
 8003300:	40013400 	.word	0x40013400
 8003304:	50013400 	.word	0x50013400
 8003308:	40014000 	.word	0x40014000
 800330c:	50014000 	.word	0x50014000

08003310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a19      	ldr	r2, [pc, #100]	@ (80033cc <TIM_OC5_SetConfig+0xbc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_OC5_SetConfig+0x82>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <TIM_OC5_SetConfig+0xc0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_OC5_SetConfig+0x82>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <TIM_OC5_SetConfig+0xc4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_OC5_SetConfig+0x82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <TIM_OC5_SetConfig+0xc8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_OC5_SetConfig+0x82>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a15      	ldr	r2, [pc, #84]	@ (80033dc <TIM_OC5_SetConfig+0xcc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_OC5_SetConfig+0x82>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <TIM_OC5_SetConfig+0xd0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d109      	bne.n	80033a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	50012c00 	.word	0x50012c00
 80033d4:	40013400 	.word	0x40013400
 80033d8:	50013400 	.word	0x50013400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	50014000 	.word	0x50014000

080033e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800342a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	051b      	lsls	r3, r3, #20
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1a      	ldr	r2, [pc, #104]	@ (80034a4 <TIM_OC6_SetConfig+0xc0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <TIM_OC6_SetConfig+0x84>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <TIM_OC6_SetConfig+0xc4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00f      	beq.n	8003468 <TIM_OC6_SetConfig+0x84>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <TIM_OC6_SetConfig+0xc8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00b      	beq.n	8003468 <TIM_OC6_SetConfig+0x84>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <TIM_OC6_SetConfig+0xcc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_OC6_SetConfig+0x84>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a16      	ldr	r2, [pc, #88]	@ (80034b4 <TIM_OC6_SetConfig+0xd0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_OC6_SetConfig+0x84>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <TIM_OC6_SetConfig+0xd4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d109      	bne.n	800347c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800346e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	029b      	lsls	r3, r3, #10
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	50012c00 	.word	0x50012c00
 80034ac:	40013400 	.word	0x40013400
 80034b0:	50013400 	.word	0x50013400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	50014000 	.word	0x50014000

080034bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800350e:	f000 80aa 	beq.w	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003516:	f200 80a3 	bhi.w	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800351a:	4a56      	ldr	r2, [pc, #344]	@ (8003674 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	f000 80a2 	beq.w	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003522:	4a54      	ldr	r2, [pc, #336]	@ (8003674 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	f200 809b 	bhi.w	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800352a:	4a53      	ldr	r2, [pc, #332]	@ (8003678 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f000 809a 	beq.w	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003532:	4a51      	ldr	r2, [pc, #324]	@ (8003678 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	f200 8093 	bhi.w	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800353a:	4a50      	ldr	r2, [pc, #320]	@ (800367c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	f000 8092 	beq.w	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003542:	4a4e      	ldr	r2, [pc, #312]	@ (800367c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f200 808b 	bhi.w	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800354a:	4a4d      	ldr	r2, [pc, #308]	@ (8003680 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f000 808a 	beq.w	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003552:	4a4b      	ldr	r2, [pc, #300]	@ (8003680 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	f200 8083 	bhi.w	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800355a:	4a4a      	ldr	r2, [pc, #296]	@ (8003684 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	f000 8082 	beq.w	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003562:	4a48      	ldr	r2, [pc, #288]	@ (8003684 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d87b      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003568:	4a47      	ldr	r2, [pc, #284]	@ (8003688 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d07b      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 800356e:	4a46      	ldr	r2, [pc, #280]	@ (8003688 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d875      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003574:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003578:	d075      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 800357a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800357e:	d86f      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003584:	d06f      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 8003586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800358a:	d869      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800358c:	2b70      	cmp	r3, #112	@ 0x70
 800358e:	d01a      	beq.n	80035c6 <TIM_SlaveTimer_SetConfig+0x10a>
 8003590:	2b70      	cmp	r3, #112	@ 0x70
 8003592:	d865      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003594:	2b60      	cmp	r3, #96	@ 0x60
 8003596:	d059      	beq.n	800364c <TIM_SlaveTimer_SetConfig+0x190>
 8003598:	2b60      	cmp	r3, #96	@ 0x60
 800359a:	d861      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 800359c:	2b50      	cmp	r3, #80	@ 0x50
 800359e:	d04b      	beq.n	8003638 <TIM_SlaveTimer_SetConfig+0x17c>
 80035a0:	2b50      	cmp	r3, #80	@ 0x50
 80035a2:	d85d      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d019      	beq.n	80035dc <TIM_SlaveTimer_SetConfig+0x120>
 80035a8:	2b40      	cmp	r3, #64	@ 0x40
 80035aa:	d859      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035ac:	2b30      	cmp	r3, #48	@ 0x30
 80035ae:	d05a      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 80035b0:	2b30      	cmp	r3, #48	@ 0x30
 80035b2:	d855      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d056      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d851      	bhi.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d052      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d050      	beq.n	8003666 <TIM_SlaveTimer_SetConfig+0x1aa>
 80035c4:	e04c      	b.n	8003660 <TIM_SlaveTimer_SetConfig+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	f000 f8b8 	bl	800374a <TIM_ETR_SetConfig>
      break;
 80035da:	e045      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x1ac>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d004      	beq.n	80035ee <TIM_SlaveTimer_SetConfig+0x132>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80035e8:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80035ec:	d101      	bne.n	80035f2 <TIM_SlaveTimer_SetConfig+0x136>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e03b      	b.n	800366a <TIM_SlaveTimer_SetConfig+0x1ae>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003618:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	4313      	orrs	r3, r2
 8003624:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
      break;
 8003636:	e017      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003644:	461a      	mov	r2, r3
 8003646:	f000 f821 	bl	800368c <TIM_TI1_ConfigInputStage>
      break;
 800364a:	e00d      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003658:	461a      	mov	r2, r3
 800365a:	f000 f846 	bl	80036ea <TIM_TI2_ConfigInputStage>
      break;
 800365e:	e003      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e000      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x1ac>
      break;
 8003666:	bf00      	nop
  }

  return status;
 8003668:	7dfb      	ldrb	r3, [r7, #23]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	00100070 	.word	0x00100070
 8003678:	00100060 	.word	0x00100060
 800367c:	00100050 	.word	0x00100050
 8003680:	00100040 	.word	0x00100040
 8003684:	00100030 	.word	0x00100030
 8003688:	00100020 	.word	0x00100020

0800368c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 030a 	bic.w	r3, r3, #10
 80036c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 0210 	bic.w	r2, r3, #16
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	031b      	lsls	r3, r3, #12
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374a:	b480      	push	{r7}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	609a      	str	r2, [r3, #8]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378a:	b480      	push	{r7}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2201      	movs	r2, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	401a      	ands	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	621a      	str	r2, [r3, #32]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_TIMEx_PWMN_Start+0x24>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e022      	b.n	800383e <HAL_TIMEx_PWMN_Start+0x6a>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d109      	bne.n	8003812 <HAL_TIMEx_PWMN_Start+0x3e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e015      	b.n	800383e <HAL_TIMEx_PWMN_Start+0x6a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d109      	bne.n	800382c <HAL_TIMEx_PWMN_Start+0x58>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_TIMEx_PWMN_Start+0x6a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e09b      	b.n	800397e <HAL_TIMEx_PWMN_Start+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_TIMEx_PWMN_Start+0x82>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003854:	e013      	b.n	800387e <HAL_TIMEx_PWMN_Start+0xaa>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d104      	bne.n	8003866 <HAL_TIMEx_PWMN_Start+0x92>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003864:	e00b      	b.n	800387e <HAL_TIMEx_PWMN_Start+0xaa>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <HAL_TIMEx_PWMN_Start+0xa2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003874:	e003      	b.n	800387e <HAL_TIMEx_PWMN_Start+0xaa>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2204      	movs	r2, #4
 8003884:	6839      	ldr	r1, [r7, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa06 	bl	8003c98 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a39      	ldr	r2, [pc, #228]	@ (8003988 <HAL_TIMEx_PWMN_Start+0x1b4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d04a      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a38      	ldr	r2, [pc, #224]	@ (800398c <HAL_TIMEx_PWMN_Start+0x1b8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d045      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b8:	d040      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c2:	d03b      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a31      	ldr	r2, [pc, #196]	@ (8003990 <HAL_TIMEx_PWMN_Start+0x1bc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d036      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a30      	ldr	r2, [pc, #192]	@ (8003994 <HAL_TIMEx_PWMN_Start+0x1c0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d031      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003998 <HAL_TIMEx_PWMN_Start+0x1c4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02c      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2d      	ldr	r2, [pc, #180]	@ (800399c <HAL_TIMEx_PWMN_Start+0x1c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d027      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <HAL_TIMEx_PWMN_Start+0x1cc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2a      	ldr	r2, [pc, #168]	@ (80039a4 <HAL_TIMEx_PWMN_Start+0x1d0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01d      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <HAL_TIMEx_PWMN_Start+0x1d4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d018      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a27      	ldr	r2, [pc, #156]	@ (80039ac <HAL_TIMEx_PWMN_Start+0x1d8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a25      	ldr	r2, [pc, #148]	@ (80039b0 <HAL_TIMEx_PWMN_Start+0x1dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a24      	ldr	r2, [pc, #144]	@ (80039b4 <HAL_TIMEx_PWMN_Start+0x1e0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a22      	ldr	r2, [pc, #136]	@ (80039b8 <HAL_TIMEx_PWMN_Start+0x1e4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_TIMEx_PWMN_Start+0x168>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a21      	ldr	r2, [pc, #132]	@ (80039bc <HAL_TIMEx_PWMN_Start+0x1e8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d115      	bne.n	8003968 <HAL_TIMEx_PWMN_Start+0x194>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	4b1f      	ldr	r3, [pc, #124]	@ (80039c0 <HAL_TIMEx_PWMN_Start+0x1ec>)
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b06      	cmp	r3, #6
 800394c:	d015      	beq.n	800397a <HAL_TIMEx_PWMN_Start+0x1a6>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003954:	d011      	beq.n	800397a <HAL_TIMEx_PWMN_Start+0x1a6>
    {
      __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	e008      	b.n	800397a <HAL_TIMEx_PWMN_Start+0x1a6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e000      	b.n	800397c <HAL_TIMEx_PWMN_Start+0x1a8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	50012c00 	.word	0x50012c00
 8003990:	40000400 	.word	0x40000400
 8003994:	50000400 	.word	0x50000400
 8003998:	40000800 	.word	0x40000800
 800399c:	50000800 	.word	0x50000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	50000c00 	.word	0x50000c00
 80039a8:	40013400 	.word	0x40013400
 80039ac:	50013400 	.word	0x50013400
 80039b0:	40001800 	.word	0x40001800
 80039b4:	50001800 	.word	0x50001800
 80039b8:	40014000 	.word	0x40014000
 80039bc:	50014000 	.word	0x50014000
 80039c0:	00010007 	.word	0x00010007

080039c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d8:	2302      	movs	r3, #2
 80039da:	e0a1      	b.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4a      	ldr	r2, [pc, #296]	@ (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a49      	ldr	r2, [pc, #292]	@ (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a47      	ldr	r2, [pc, #284]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d108      	bne.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a34      	ldr	r2, [pc, #208]	@ (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04a      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a33      	ldr	r2, [pc, #204]	@ (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d045      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a70:	d040      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a7a:	d03b      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2e      	ldr	r2, [pc, #184]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d036      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d031      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2b      	ldr	r2, [pc, #172]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02c      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d027      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a28      	ldr	r2, [pc, #160]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d022      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a27      	ldr	r2, [pc, #156]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d01d      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d018      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a20      	ldr	r2, [pc, #128]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10c      	bne.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	50012c00 	.word	0x50012c00
 8003b34:	40013400 	.word	0x40013400
 8003b38:	50013400 	.word	0x50013400
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	50000400 	.word	0x50000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	50000800 	.word	0x50000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	50000c00 	.word	0x50000c00
 8003b54:	40001800 	.word	0x40001800
 8003b58:	50001800 	.word	0x50001800
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	50014000 	.word	0x50014000

08003b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e07d      	b.n	8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1d      	ldr	r2, [pc, #116]	@ (8003c8c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003c94 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d11c      	bne.n	8003c6a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	051b      	lsls	r3, r3, #20
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	50012c00 	.word	0x50012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	50013400 	.word	0x50013400

08003c98 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	2204      	movs	r2, #4
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <memset>:
 8003ce2:	4402      	add	r2, r0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d100      	bne.n	8003cec <memset+0xa>
 8003cea:	4770      	bx	lr
 8003cec:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf0:	e7f9      	b.n	8003ce6 <memset+0x4>
	...

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d2c <__libc_init_array+0x38>)
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	@ (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	4d0b      	ldr	r5, [pc, #44]	@ (8003d34 <__libc_init_array+0x40>)
 8003d06:	2600      	movs	r6, #0
 8003d08:	4c0b      	ldr	r4, [pc, #44]	@ (8003d38 <__libc_init_array+0x44>)
 8003d0a:	f000 f817 	bl	8003d3c <_init>
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	4798      	blx	r3
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d26:	3601      	adds	r6, #1
 8003d28:	4798      	blx	r3
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08003d64 	.word	0x08003d64
 8003d30:	08003d64 	.word	0x08003d64
 8003d34:	08003d64 	.word	0x08003d64
 8003d38:	08003d68 	.word	0x08003d68

08003d3c <_init>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr

08003d48 <_fini>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr
